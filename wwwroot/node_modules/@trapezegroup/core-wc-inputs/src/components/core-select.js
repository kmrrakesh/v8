// @ts-check
/* global jQuery, i18next */
import { html, css, unsafeCSS } from 'lit-element';
import { translate as t } from 'lit-i18n/src/lit-i18n.js';
import '/node_modules/@trapezegroup/core-webui-styles/dist/theme-default/components/dropdown.js';
import '/node_modules/@trapezegroup/core-webui-styles/dist/theme-default/components/transition.js';
import { style as dropdownCSS } from '/node_modules/@trapezegroup/core-webui-styles/css-variables/dropdown.css.js';
import { style as transitionCSS } from '/node_modules/@trapezegroup/core-webui-styles/css-variables/transition.css.js';
import { arrowDown } from '@trapezegroup/core-js-icons/src/lib/arrow.js';
import { CoreInput } from './core-input.js';

/** This is an example of a component which extends the litElement */
export class CoreSelect extends CoreInput {
    /** @inheritdoc */
    static get styles() {
        return [
            ...super.styles,
            css`
                .ui.dropdown {
                    width: 100%;
                }
                .menu {
                    min-width: calc(100% + 2px);
                    width: calc(100% + 2px);
                }
                span.sizer {
                    display: none;
                }
                .ui.label > .delete.icon {
                    cursor: pointer;
                    float: right;
                    margin-right: 1.2rem;
                    top: 0.6rem;
                    background-color: var(--ter-button-border);
                    height: 10px;
                    position: relative;
                    width: 0.2rem;
                    transform: rotate(45deg);
                }
                .ui.label > .delete.icon:after {
                    content: '';
                    background-color: var(--prim-icon-bg);
                    height: 0.2rem;
                    left: -0.4rem;
                    position: absolute;
                    top: 0.4rem;
                    width: 1rem;
                }
                .ui.multiple.dropdown.core-dropdown > .label {
                    padding: 0rem;
                    line-height: 2.3rem;
                    min-width: 9.4rem;
                    height: 2.3rem;
                    margin-right: 1rem;
                    background-color: var(--prim-button-bg);
                    text-align: center;
                    color: var(--prim-button-txt);
                    border-radius: 2rem;
                    font-size: var(--txt-size);
                }
                .ui.dropdown .menu {
                    background-color: var(--bg) !important;
                    box-shadow: var(--prim-shdw);
                    position: relative;
                    overflow-y: scroll;
                    margin-top: 0.2rem !important;
                }
                .ui.selection.dropdown.visible {
                    border: 1px solid var(--prim-sel-brd) !important;
                }
                .ui.dropdown.core-dropdown .menu > .item {
                    border: none !important;
                    color: var(--sec-txt);
                    font-size: var(--txt-size);
                    line-height: 2.5rem;
                }
                .ui.dropdown.core-dropdown .menu > .item:hover {
                    background-color: var(--prim-sel-brd);
                    color: var(--prim-txt);
                }
                .ui.dropdown.core-dropdown > .text {
                    font-size: var(--txt-size);
                    color: var(--sec-txt) !important;
                }
                .ui.search.selection.dropdown > input.search {
                    color: var(--prim-txt);
                }
                .ui.search.selection.dropdown.core-single-select > input.search {
                    padding: 0.8rem 3.3rem 0.8rem 1.2rem !important;
                }
                .ui.multiple.dropdown.core-multi-select {
                    padding: 0 !important;
                }
            `,
            unsafeCSS(dropdownCSS),
            unsafeCSS(transitionCSS),
        ];
    }

    /** @inheritdoc */
    static get properties() {
        return {
            ...super.properties,
            inputValues: { type: Array },
            multiSelect: { type: Boolean, attribute: 'multi-select' },
        };
    }

    /** @inheritdoc */
    disconnectedCallback() {
        // @ts-ignore
        i18next.off('languageChanged', this.onLanguageChange);
        super.disconnectedCallback();
    }

    /** We can initialize the properties here in the constructor */
    constructor() {
        // Must call superconstructor first.
        super();
        this.icon = arrowDown;
        this.hidden = true;
        this.inputValues = [];
        this.multiSelect = false;
        this.onLanguageChange = this.onLanguageChange.bind(this);

        // @ts-ignore
        i18next.on('languageChanged', this.onLanguageChange);
    }

    /** Called when the language is changed
     * Translating the default text "No results found" and assigning it to the dropdown */
    onLanguageChange() {
        if (this.isConnected) {
            const localeMsgKey = `core-wc-inputs:${this.createLocalizedKey('No results found')}`;
            // @ts-ignore
            const localeMessage = i18next.t(localeMsgKey);
            getDropDown(this).dropdown('setting', {
                message: { noResults: localeMessage },
            });
        }
    }

    /** Opens the dropdown */
    show() {
        jQuery(this.shadowRoot.querySelector('.ui.dropdown')).dropdown('show');
    }

    /** @returns {import('./core-input.js').TemplateResult} Main UI */
    render() {
        return html`
            <div class="container">
                ${this.mainContentTemplate}
            </div>`;
    }

    /**
     * @inheritdoc
     * @param {Map<string, string>} changedProperties that triggered the update
     */
    updated(changedProperties) {
        // If value or available values change we need to get the drop down to eveluate the display text.
        if (changedProperties.has('inputValues') || changedProperties.has('value')) {
            if (this.inputValues && this.inputValues.length) {
                this.updateComplete.then(() => this.initializeDropDown());
            }
        }
    }

    /** Initializes the dropdown */
    initializeDropDown() {
        const node = getDropDown(this);
        // Clear previous values as dropdown will not clear multiselect labels
        this.shadowRoot.querySelectorAll('.ui.dropdown > .label').forEach(l => l.parentElement.removeChild(l));
        // Reinitialize dropdown
        node.dropdown({
            debug: true,
            onChange: this.handleInputSelected.bind(this),
            selector: {
                addition: '.addition',
                // @ts-ignore this is in the source code but not in the typings
                divider: '.divider, .header',
                dropdown: '.ui.dropdown',
                icon: '.icon',
                input: 'input[type="hidden"]',
                item: '.item',
                label: '> .label',
                remove: '> .label > .delete.icon',
                siblingLabel: '.label',
                menu: '.menu',
                message: '.menu .message',
                menuIcon: '.dropdown.icon',
                search: 'input.search',
                text: '.text.input',
            },
        });
    }

    /** @returns {string} The css class name to use the outer div */
    get cssClassName() {
        return `ui-input ui search selection dropdown core-dropdown ${
            this.multiSelect ? 'multiple core-multi-select' : 'core-single-select'
        }`;
    }

    /** @returns {import('./core-input').TemplateResult} native input template */
    get inputTemplate() {
        const defaultPlaceholderKey = `core-wc-inputs:${this.createLocalizedKey('Select Input')}`;
        return html`
        <div class=${this.cssClassName}>
            <input type="hidden" value=${this.value}>
            <div class="default text input">${this.placeholder || t(defaultPlaceholderKey, {})}</div>
            <div class="menu">
                ${this.inputValues.map(
                    dropdownVal => html`
                    <div class="item" data-value="${dropdownVal}">
                        ${dropdownVal}
                    </div>`,
                )}
            </div>
        </div>
        `;
    }

    /**
     * Converts the string to camelcase string
     * @param {string} str string to be converted to localized key format
     * @returns {string} returns the camelcase converted string
     */
    createLocalizedKey(str) {
        return str.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (m, chr) => chr.toUpperCase());
    }
    /**
     * Handles when the selection from the dropdown changes
     * @param {string} selectValue selected from the select input
     * @returns {boolean} If the action was cancelled
     */
    handleInputSelected(selectValue) {
        const changeEvent = new CustomEvent('change', {
            composed: true,
            bubbles: true,
            cancelable: true,
            detail: {
                value: selectValue,
            },
        });

        this.dispatchEvent(changeEvent);
        return !changeEvent.defaultPrevented;
    }

    /**
     * @private
     * Perform actions when the input icon is clicked
     * @param {MouseEvent} event click
     */
    handleIconClick(event) {
        const input = this.shadowRoot.querySelector('.text.input');
        input instanceof HTMLElement && input.click();
    }
}
customElements.define('core-select', CoreSelect);

/**
 * @param {Element} host the dropdown is in
 * @returns {any} JQuery result
 */
function getDropDown(host) {
    return jQuery(host.shadowRoot.querySelector('.ui.dropdown'));
}

/* global jQuery */
/**  import litElement base class and html helper function */
import { html, css, unsafeCSS } from 'lit-element';
import { styles as calendarStyles } from '/node_modules/@trapezegroup/core-webui-styles/css-variables/calendar.css.js';
import { style as popupStyles } from '/node_modules/@trapezegroup/core-webui-styles/css-variables/popup.css.js';
import { style as transitionStyles } from '/node_modules/@trapezegroup/core-webui-styles/css-variables/transition.css.js';
import { styles as tableStyles } from '/node_modules/@trapezegroup/core-webui-styles/css-variables/table.css.js';
import '/node_modules/@trapezegroup/core-webui-styles/dist/theme-default/components/calendar.js';
import '/node_modules/@trapezegroup/core-webui-styles/dist/theme-default/components/popup.js';
import '/node_modules/@trapezegroup/core-webui-styles/dist/theme-default/components/transition.js';
import { calendar } from '/node_modules/@trapezegroup/core-js-icons/src/lib/calendar.js';
import { clock } from '/node_modules/@trapezegroup/core-js-icons/src/lib/clock.js';
import { CoreInput } from './core-input.js';

/** @typedef {import('lit-element').TemplateResult} TemplateResult */

/** This is an example of a component which extends the litElement */
export class CoreDatetimePickerBase extends CoreInput {
    /** @inheritdoc */
    static get styles() {
        return [
            ...super.styles,
            css`
                .ui.calendar {
                    /* Fix Semantic with shadowDOM */
                    position: relative;
                    box-sizing: border-box;
                    width: 100%;
                }

                .ui.calendar .ui.popup.popup {
                    padding: 0.8rem;
                }

                .ui.calendar .ui.popup .ui.table {
                    width: calc(3.5rem * 7);
                    border: none;
                }

                .ui.calendar .ui.popup .ui.table th {
                    background-color: var(--prim-bg);
                    border: none;
                    height: 3.5rem;
                    padding: 0;
                    font-size: 1.5rem;
                }

                .ui.calendar .ui.popup .ui.table td {
                    border: none;
                    height: 3.5rem;
                    padding: 0;
                    font-size: 1.5rem;
                }

                .ui.table td:hover {
                    background-color: rgb(var(--prim-bg-hover-rgb));
                }

                .ui.calendar .ui.popup .ui.table .prev.link {
                    left: 3.5rem;
                    top: 1rem;
                }

                .ui.calendar .ui.popup .ui.table .prev.link i {
                    border-top: 0.75rem solid transparent;
                    border-right: 0.75rem solid var(--prim-txt);
                    border-bottom: 0.75rem solid transparent;
                    display: inline-block;
                }

                .ui.calendar .ui.popup .ui.table .next.link {
                    right: 3.5rem;
                    top: 1rem;
                }

                .ui.calendar .ui.popup .ui.table .next.link i {
                    border-top: 0.75rem solid transparent;
                    border-left: 0.75rem solid var(--prim-txt);
                    border-bottom: 0.75rem solid transparent;
                    display: inline-block;
                }
            `,
            unsafeCSS(calendarStyles),
            unsafeCSS(popupStyles),
            unsafeCSS(transitionStyles),
            unsafeCSS(tableStyles),
        ];
    }

    /** @returns {any} Fomantic UI Calendar options. https://fomantic-ui.com/modules/calendar.html#/settings. */
    get calendarOptions() {
        return { type: 'date' };
    }

    /** We can initialize the properties here in the constructor */
    constructor() {
        // Must call superconstructor first.
        super();

        this.placeholder = 'Date';

        switch (this.calendarOptions.type) {
            case 'date':
                this.icon = calendar;
                break;
            case 'time':
                this.icon = clock;
                break;
            default:
                this.icon = calendar;
        }
    }

    /** @returns {TemplateResult} Main UI */
    render() {
        return html`
            <div class="ui calendar container">
                ${this.mainContentTemplate}
            </div>
        `;
    }

    /** @inheritdoc */
    firstUpdated() {
        const options = Object.assign(
            {},
            {
                type: 'date',
                transition: false,
                popupOptions: {
                    position: 'bottom right',
                },
                onChange: (date, dateStr, type) => this.handleDateChange(date),
            },
            this.calendarOptions,
        );

        if (this.value) {
            options.initialDate = new Date(this.value);
        }
        // @ts-ignore
        jQuery(this.shadowRoot.querySelector('.ui.calendar')).calendar(options);
    }

    get iconCssClass() {
        return 'icon calendar';
    }

    /**
     * Performs logic to handle date changes
     * @param {Date} date the new Date
     * @returns {boolean} If the action was cancelled
     */
    handleDateChange(date) {
        const changeEvent = new CustomEvent('change', {
            composed: true,
            bubbles: true,
            cancelable: true,
            detail: {
                value: date,
                name: this.name,
            },
        });

        this.dispatchEvent(changeEvent);

        return !changeEvent.defaultPrevented;
    }
}

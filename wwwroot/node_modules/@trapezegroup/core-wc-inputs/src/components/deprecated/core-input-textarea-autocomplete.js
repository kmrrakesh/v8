/* eslint-disable no-param-reassign */
/* eslint-disable require-jsdoc */
import { CoreInputCombobox } from './core-input-combobox.js';

// @ts-check
export class CoreInputTextareaAutocomplete extends CoreInputCombobox {
    constructor() {
        super();
    }

    initInputNode() {
        const input = document.createElement('textarea');
        input.setAttribute('autocomplete', 'off');
        input.setAttribute('key', '');
        input.setAttribute('type', 'text');
        input.setAttribute('value', this.getDisplayValue());

        if (this.isRequired()) input.setAttribute('required', 'true');
        this.stopObserving('mousedown', input);
        this.textInput = this.appendChild(input);
        return this.textInput;
    }

    doOnDialogClose(event) {
        const input = this.getInputElement();

        const selectedValue = this.getSelectedValue();

        if (selectedValue) this.replaceCurrentWord(selectedValue);

        // this.updateValue(input.value, event);
        if (input) {
            input.focus();

            // if(input.select)
            //	input.select();
        }
    }

    getSelectedValue() {
        return this.getOptionValue(this.getSelectedItem());
    }

    autocomp() {
        this._autoCompTimeout = null;
        const token = this.getWordUptoCarret();
        const item = this.findPartialMatch(token);
        if (item) {
            if (this.isDrop) this.dropbutton.showPopup(null, true);
            this.selectItem(item, true);
        } else {
            this.removeLastSelected();
            this.removeSelection();
        }
        if (this.statics.FILTER) this.filterByMatch(token);
    }

    wrapSelection(pre, post) {
        post = post || '';
        const oMsgInput = this.getInputElement();
        const nSelStart = oMsgInput.selectionStart;
        const nSelEnd = oMsgInput.selectionEnd;
        const sOldText = oMsgInput.value;
        oMsgInput.value =
            sOldText.substring(0, nSelStart) +
            (pre + sOldText.substring(nSelStart, nSelEnd) + post) +
            sOldText.substring(nSelEnd);
        oMsgInput.setSelectionRange(nSelStart + pre.length, nSelEnd + pre.length);
        oMsgInput.focus();
    }

    replaceSelection(withString) {
        const oMsgInput = this.getInputElement();
        const nSelStart = oMsgInput.selectionStart;
        const nSelEnd = oMsgInput.selectionEnd;
        const sOldText = oMsgInput.value;
        oMsgInput.value = sOldText.substring(0, nSelStart) + withString + sOldText.substring(nSelEnd);
        oMsgInput.setSelectionRange(nSelStart + withString.length, nSelStart + withString.length);
        oMsgInput.focus();
    }

    replaceCurrentWord(withString) {
        this.selectCurrentWord();
        this.replaceSelection(withString);
    }

    selectCurrentWord() {
        const oMsgInput = this.getInputElement();
        const nSelStart = oMsgInput.selectionStart;

        const word = this.getWord(nSelStart, oMsgInput.value);

        oMsgInput.setSelectionRange(word.startIndex, word.endIndex);
        oMsgInput.focus();
    }

    getCurrentWord() {
        const oMsgInput = this.getInputElement();
        const nSelStart = oMsgInput.selectionStart;
        return this.getWord(nSelStart, oMsgInput.value).text;
    }

    getWordUptoCarret() {
        const oMsgInput = this.getInputElement();
        const nSelStart = oMsgInput.selectionStart;
        return this.getWordStart(nSelStart, oMsgInput.value).text;
    }

    /**
     * Gets the partial word before the cursor.
     */
    getWordStart(cursorIndex, text) {
        text = text || this.getInputElement().value;
        const result = /\S+$/.exec(text.substring(0, cursorIndex));

        return result ? { index: result.index, text: result[0] } : { index: cursorIndex, text: '' };
    }

    /**
     * Gets the partial word after the cursor.
     */
    getWordEnd(cursorIndex, text) {
        text = text || this.getInputElement().value;
        const textAfterCarrot = text.substr(cursorIndex);
        const textResult = /^\S+/.exec(textAfterCarrot);
        const indexResult = /\s/.exec(textAfterCarrot);

        if (textResult)
            return {
                index: (indexResult ? indexResult.index : textAfterCarrot.length) + cursorIndex,
                text: textResult[0],
            };
        return { index: cursorIndex, text: '' };
    }

    /**
     * Gets the current word the cursor is in.
     */
    getWord(cursorIndex, text) {
        const start = this.getWordStart(cursorIndex, text);
        const end = this.getWordEnd(cursorIndex, text);
        return { startIndex: start.index, endIndex: end.index, text: start.text + end.text };
    }
}
customElements.define('core-input-textarea-autocomplete', CoreInputTextareaAutocomplete);

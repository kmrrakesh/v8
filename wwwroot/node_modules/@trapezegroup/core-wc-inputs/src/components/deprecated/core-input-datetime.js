/* eslint-disable no-param-reassign */
/* eslint-disable require-jsdoc */
import { TcfDateTime, AbstractType } from '/node_modules/@trapezegroup/core-js-tcftypes/src/lib/types.js';
import { getProperty } from '/node_modules/@trapezegroup/core-js-extensions/src/lib/element.js';
import { CoreInputBase } from './core-input-base.js';

// @ts-check

export class CoreInputDateTime extends CoreInputBase {
    static DEFAULT_DATATYPE = TcfDateTime;

    atDateTimeChanged(target, contextElement, context) {
        context.eventStop(event);
        const dt = this.getDataType();
        const oldValue = dt.getValue();
        this.setValuePortion(context.widget, context.newValue);
        if (this.notifyChange(context.event, this.getValue())) this.notifyChanged(context.event, this.getValue());
        else this.setValue(oldValue);
    }

    constructor() {
        super();
    }

    init() {
        this.initInputNode();
        this.callSuper();
        this.dateBehavior.init();
        this.timeBehavior.init();
        this.setValue(getProperty(this, 'value', 0));
        this.setNodeValue(this.dataType.getValue());
    }

    setDataType(abstractDataType) {
        this.callSuper(abstractDataType);
        this.dataType.initLocale(this);
    }

    setValuePortion(behavior, value) {
        // console.log("setValuePortion");
        const dt = this.getDataType();
        const dateDataType = this.dateBehavior.getDataType();
        const timeDataType = this.timeBehavior.getDataType();
        const dateValue = dateDataType.getValue();
        const timeValue = timeDataType.getValue();
        if (value === null && dateValue === null && timeValue === null) dt.setValue(null);
        else if (behavior === this.dateBehavior) {
            dt.setDate(dateDataType);
        } else if (behavior === this.timeBehavior) {
            dt.setTime(timeDataType);
        }
        this.setNodeValue(this.dataType.getValue());
        this.validate();
    }

    setValue(value) {
        value = value || null;
        if (value !== undefined) {
            if (value instanceof AbstractType) this.setDataType(value);
            else {
                const dt = this.getDataType();
                dt.setValue(value);
                if (value === null) {
                    this.dateBehavior.setDataType(this.dateBehavior.dataType.setValue(null));
                    this.timeBehavior.setDataType(this.timeBehavior.dataType.setValue(null));
                } else {
                    this.dateBehavior.setDataType(dt.getDate());
                    this.timeBehavior.setDataType(dt.getTime());
                }
                this.timeBehavior.setDisplayValue(this.timeBehavior.getDataType().toString());
                this.setNodeValue(this.dataType.getValue());
            }
        }
    }

    getValue() {
        const dt = this.getDataType();
        dt.setDate(this.dateBehavior.getDataType());
        dt.setTime(this.timeBehavior.getDataType());
        return dt.getValue();
    }

    getDataType() {
        return this.dataType;
    }

    initInputNode() {
        const value = getProperty(this, 'value', 0) || null;
        const dt = new TcfDateTime(value);
        const required = this.isRequired() ? 'true' : 'false';
        const calendar = document.createElement('core-input-calendar');
        calendar.classList.add('Medium');
        calendar.setAttribute('drop', 'true');
        if (required) calendar.setAttribute('required', 'required');
        calendar.setAttribute('placeholder', getProperty(this, 'locale_dateplaceholder', ''));
        calendar.setAttribute('title', getProperty(this, 'locale_datetooltip', ''));

        const timeInput = document.createElement('core-input-time');
        calendar.classList.add('Medium');
        calendar.setAttribute('style', 'border: none;');
        if (required) calendar.setAttribute('required', 'required');
        calendar.setAttribute('placeholder', getProperty(this, 'locale_timeplaceholder', ''));
        calendar.setAttribute('title', getProperty(this, 'locale_timetooltip', ''));

        if (value !== null) {
            calendar.value = dt.getDate().getValue();
            timeInput.setAttribute('value', dt.getTime().getValue());
        } else {
            // calendar.value = "";
            calendar.setAttribute('value', undefined);
            timeInput.setAttribute('value', '');
        }

        this.appendChild(calendar);
        this.observe('userChanged', 'atDateTimeChanged', calendar);
        this.appendChild(timeInput);
        this.observe('userChanged', 'atDateTimeChanged', timeInput);
        this.dateBehavior = calendar;
        this.timeBehavior = timeInput;
    }
}
customElements.define('core-input-datetime', CoreInputDateTime);

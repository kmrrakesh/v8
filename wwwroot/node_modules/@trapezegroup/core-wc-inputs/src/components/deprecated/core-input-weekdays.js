/* eslint-disable no-plusplus */
/* eslint-disable no-param-reassign */
/* eslint-disable require-jsdoc */
import {
    TcfWeekdaysInt,
    TcfWeekdaysStr,
    AbstractType,
} from '/node_modules/@trapezegroup/core-js-tcftypes/src/lib/types.js';
import { getProperty, createElement } from '/node_modules/@trapezegroup/core-js-extensions/src/lib/element.js';
import { getStyle } from '/node_modules/@trapezegroup/core-js-extensions/src/lib/styles.js';
import { CoreInputChecklist } from './core-input-checklist.js';
import { CoreInputDropBase } from './core-input-drop-base.js';

// @ts-check

export class CoreInputWeekdays extends CoreInputChecklist {
    static CONTAINER_TAG = 'CORE:WEEKDAYS';
    static DIALOG_CLASS_NAMES = { drop: 'weekpane dlgpane', pane: 'weekdays' };
    static ALLOWED_DATATYPES = [TcfWeekdaysStr, TcfWeekdaysInt];
    static DEFAULT_DATATYPE = TcfWeekdaysStr;
    static DEFAULT_INITIAL_VALUE = '0000000';

    constructor() {
        super();

        const localeEnum = parseInt(this.getLocaleValue(TcfWeekdaysStr.prototype.getLocalizationKey()), 10);
        this.fdow = localeEnum < 0x11 ? 0 : 1;
    }

    setData() {}
    getData() {}

    getDataType() {
        this.dataType.fromString(this.getSelectedValue());
        return this.dataType;
    }

    _getInitialValue(initialItem) {
        return getProperty(this, 'value', '0000000');
    }

    generateDialogContent(event, aValue) {
        if (aValue === '' || aValue == null) aValue = '0000000';

        if (Object.isNumber(aValue))
            aValue = aValue
                .toString(2)
                .toZeroPaddedString(7)
                .reverse();

        let dix = this.fdow;
        const localeWeekdaysLong = this.getLocaleArray('localeWeekdaysLong');
        const weekdaysElems = this.dialog.childElements();
        const weekSize = localeWeekdaysLong.length;

        for (let ix = 0; ix < weekSize; ix++) {
            if (dix >= weekSize) dix = 0;

            const weekday = localeWeekdaysLong[dix];
            const dayValue = aValue.charAt(dix) === '1' ? this.statics.BOOLEAN_TRUE : this.statics.BOOLEAN_FALSE;

            if (!weekdaysElems[ix]) {
                const checkItemElem = createElement('core:checkitem', { tabIndex: -1 });
                checkItemElem.appendChild(
                    createElement('input', {
                        autocomplete: 'off',
                        style: 'border-style: none;',
                        tabIndex: -1,
                        type: 'checkbox',
                    }),
                );
                checkItemElem.appendChild(document.createTextNode(weekday));
                weekdaysElems.push(this.dialog.appendChild(checkItemElem));
            }

            weekdaysElems[ix].selectFirst('input').checked = dayValue === this.statics.BOOLEAN_TRUE;

            dix++;
        }
    }

    nondropInit(initialValue, initialText) {
        if (this.innerHTML) this.innerHTML = '';
        this.appendChild(this.dialog);
        this.dataType.setValue(initialValue);
        this.selectItemFromValue(null, initialValue);
    }

    // dropInit(aValue){ this.callSuper(this.formatValue(aValue)); }

    replaceDialogContent(listItems, aValue) {}
    cleanupItemBoxes() {}

    adjustWidth() {
        // We want the popup to expand it's width to be able to fit it's content. But we also want it's width to be at least the width of the input.
        this.dialog.style.minWidth = getStyle(this, 'width');
    }

    getOptionValue(option) {
        if (!option) return '0000000';

        const items = this.getOptions();
        let value = '';
        for (let i = 0, iLen = items.length; i < iLen; i++) value += items[i] === option ? '1' : '0';

        return value;
    }

    getSelectedValue() {
        let aValue = '';

        if (!this.dialog) return getProperty(this, 'value');

        const children = this.dialog.childElements();
        let cix = 0;

        for (let wix = 0; wix < children.length; wix++) {
            if (cix === children.length) cix = 0;
            aValue += children[cix].firstChild.checked ? 1 : 0;
            cix++;
        }

        return aValue;
    }

    getListIndex(keyValue) {
        const options = this.getOptions();

        for (let ix = 0; ix < options.length; ix++)
            if (keyValue === this.getOptionValue(options[ix])) return ix - this.fdow;

        return -1;
    }

    selectItemFromValue = CoreInputDropBase.prototype.selectItemFromValue;

    setValue(value) {
        this.callSuper(value);
        this.generateDialogContent(null, value instanceof AbstractType ? value.getValue() : this.parseValue(value));
    }

    scrollIntoView() {}

    validate() {}
}
customElements.define('core-input-weekdays', CoreInputWeekdays);

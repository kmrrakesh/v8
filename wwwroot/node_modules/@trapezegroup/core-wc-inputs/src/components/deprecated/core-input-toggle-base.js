/* eslint-disable require-jsdoc */
import { eventStop } from '/node_modules/@trapezegroup/core-js-extensions/src/lib/event.js';

import { CoreInputBase } from './core-input-base.js';
import { EditorAdvice } from './core-inline-editor.js';

// @ts-check

export class CoreInputToggleBase extends CoreInputBase {
    // static generateContainer = function generateContainer(inputProperties) {
    //     let node = CoreInputBoolean.generateContainer(inputProperties);
    //     node.style.display = 'none';
    //     return node;
    // };

    static CONTROLLER_ADVICE_KEYDOWN = function CONTROLLER_ADVICE_KEYDOWN(event) {
        if (event.keyCode === Event.KEY_SPACE) {
            eventStop(event);
            return EditorAdvice.COMMIT;
        }
        return EditorAdvice.CONTINUE;
    };

    static CONTROLLER_ADVICE_MOUSEDOWN = function CONTROLLER_ADVICE_MOUSEDOWN(event) {
        return EditorAdvice.COMMIT;
    };

    initialize(obj, possibleValues) {
        this.statuses = possibleValues;
        this.currentStatus = 0;
        this.callSuper(obj);
    }

    init(context) {
        let event;
        // eslint-disable-next-line no-cond-assign
        if (
            (context && ({ event } = context) && event.type.indexOf('key') === -1) ||
            event.keyCode === Event.KEY_SPACE
        ) {
            if (context.fieldsInfo.selector) this.setData(context.fieldsInfo.selector);
            if (this.statuses) this.incrementStatus();
        }
        return EditorAdvice.COMMIT;
    }

    dispose() {
        this.statuses = null;
        this.callSuper();
    }

    setDataType(type) {
        this.dataType = type;
        this.setStatus(type.getValue());
    }

    getDataType(type) {
        this.dataType.setValue(this.statuses[this.currentStatus]);
        return this.dataType;
    }

    incrementStatus() {
        // eslint-disable-next-line no-plusplus
        this.currentStatus++;
        this.currentStatus = this.currentStatus < this.statuses.length ? this.currentStatus : 0;
        return this;
    }

    setStatus(value) {
        for (let i = 0; i < this.statuses.length; i++) if (this.statuses[i] === value) this.currentStatus = i;
    }

    placeOver() {}

    show() {}

    setState(state) {
        return {};
    }
}

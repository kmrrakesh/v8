import { LitElement, html, css } from 'lit-element';
import { unsafeHTML } from 'lit-html/directives/unsafe-html.js';
import { ifDefined } from 'lit-html/directives/if-defined.js';
import '../lib/i18n.js';

/** @typedef {import('lit-element').TemplateResult} TemplateResult */
/** @typedef {import('lit-element').CSSResult} CSSResult */

/** This is an example of a component which extends the litElement */
export class CoreInput extends LitElement {
    /** @inheritdoc */
    static get properties() {
        return {
            value: { type: String },
            name: { type: String },
            icon: { type: String },
            placeholder: { type: String },
            type: { type: String },
            readonly: { type: Boolean, attribute: 'readonly' },
            disabled: { type: Boolean, attribute: 'disabled' },
        };
    }

    /** @inheritdoc */
    static get styles() {
        return [
            css`
                :host {
                    display: inline-block;
                    width: 35.4rem;
                    min-height: 3.8rem;
                    position: relative;
                    --pad: var(--core-input-pad, 0.8rem);
                    --bg: var(--core-input-bg, var(--sec-bg));
                    --txt-size: var(--core-input-size, 1.4rem);
                    --color: var(--prim-txt);
                    --brd-rad: var(--core-input-brd-rad, 0.2rem);
                    background-color: var(--bg);
                    border: 1px solid var(--prim-brd);
                    border-radius: var(--brd-rad);
                    box-sizing: border-box;
                }

                :host * {
                    box-sizing: border-box;
                }

                :host(:focus-within) {
                    border-color: var(--prim-sel-brd);
                }

                .container.container.container.container {
                    display: inline-grid;
                    min-height: 3.6rem;
                    grid-template-columns: auto 1fr auto auto;
                    width: 100%;
                    vertical-align: middle;
                }
            `,
            this.labelStyles,
            this.unitsStyles,
            this.inputStyles,
            this.iconStyles,
        ];
    }

    /** @returns {CSSResult} label styles */
    static get inputStyles() {
        return css`
            .ui-input {
                font-size: var(--txt-size);
                color: var(--txt-color);
                width: 100%;
                padding: var(--pad);
                border: none;
                background-color: var(--bg);
                outline: none;
                border-radius: var(--brd-rad);
            }
        `;
    }

    /** @returns {CSSResult} label styles */
    static get labelStyles() {
        return css`
            :host .input-label {
                display: inline;
                width: 0;
            }
            :host(.has-slot-label) .input-label {
                width: initial;
                font-weight: bold;
                font-size: var(--txt-size);
                color: var(--txt-color);
                padding: var(--pad);
                position: relative;
                top: 0.1rem;
                text-transform: capitalize;
            }
        `;
    }

    /** @returns {CSSResult} label styles */
    static get unitsStyles() {
        return css`
            :host .input-units {
                display: inline;
                width: 0;
            }
            :host(.has-slot-units) .input-units {
                width: initial;
                font-weight: bold;
                font-size: var(--txt-size);
                color: var(--txt-color);
                margin: var(--pad);
                position: relative;
                top: 0.1rem;
            }
        `;
    }

    /** @returns {CSSResult} label styles */
    static get iconStyles() {
        return css`
            .ui-input + .icon {
                --icon-color: var(--prim-txt);
                display: inline-block;
                width: calc(100% - var(--pad));
                height: 100%;
                box-sizing: border-box;
                padding: var(--pad) var(--pad) 0;
                border-left: 1px solid var(--prim-brd);
                cursor: pointer;
            }

            :host(:focus-within) .ui-input + .icon {
                border-color: var(--prim-sel-brd);
            }

            .ui-input + .icon svg {
                position: relative;
                top: 0.2rem;
                width: calc(var(--txt-size) * 1.2);
            }
        `;
    }

    /** @inheritdoc */
    connectedCallback() {
        this.shadowRoot.addEventListener('slotchange', e => {
            const slot = e.path[0];
            if (slot) {
                this.classList.add(`has-slot-${slot.getAttribute('name')}`);
            }
        });

        super.connectedCallback();
    }

    /** We can initialize the properties here in the constructor */
    constructor() {
        // Must call superconstructor first.
        super();

        /** @type {string} ISO date */
        this.value = '';
        /** @type {string} name to give to the input */
        this.name = undefined;

        /** @type {string} SVG markup for the icon that will be displayed in the input */
        this.icon = undefined;

        /** @type {string} input placeholder */
        this.placeholder = undefined;

        /** @type {string} set the type of the input */
        this.type = 'text';

        /** @type {boolean} checks for the readonly attribute */
        this.readonly = false;

        /** @type {boolean} checks for the disabled attribute */
        this.disabled = false;
    }

    /** @returns {TemplateResult} Main UI */
    render() {
        return html`
            <div class="container">
                ${this.mainContentTemplate}
            </div>
        `;
    }

    /** @returns {Array<TemplateResult>} main contents */
    get mainContentTemplate() {
        return [this.labelTemplate, this.inputTemplate, this.iconTemplate, this.unitsTemplate];
    }

    /** @returns {TemplateResult} the template to use for the input label */
    get labelTemplate() {
        return html`
            <span class="input-label">
                <slot name="label"></slot>
            </span>
        `;
    }

    /** @returns {TemplateResult} the template to use for the input units */
    get unitsTemplate() {
        return html`
            <span class="input-units">
                <slot name="units"></slot>
            </span>
        `;
    }

    /** @returns {TemplateResult} native input template */
    get inputTemplate() {
        return html`
            <input 
                class="ui-input"
                type="${this.type}" 
                placeholder=${ifDefined(this.placeholder)} 
                name=${ifDefined(this.name)} 
                .value=${this.value}
                @change=${this.handleValueChange} 
                ?readonly=${this.readonly}
                ?disabled=${this.disabled}
                >
                `;
    }

    /** @returns {TemplateResult} conditional icon */
    get iconTemplate() {
        return this.icon === undefined
            ? null
            : html`<i class="icon" @click=${e => this.handleIconClick(e)}>${unsafeHTML(this.icon)}</i>`;
    }

    /**
     * Performs logic to handle date changes
     * @param {Event} event the input event
     * @returns {boolean} If the action was cancelled
     */
    handleValueChange(event) {
        const changeEvent = new CustomEvent('change', {
            composed: true,
            bubbles: true,
            cancelable: true,
            detail: {
                value: event.target.value,
                name: this.name,
            },
        });

        this.dispatchEvent(changeEvent);

        return !changeEvent.defaultPrevented;
    }

    /**
     * @private
     * Perform actions when the input icon is clicked
     * @param {MouseEvent} event click
     */
    handleIconClick(event) {
        this.shadowRoot.querySelector('input').click();
    }
}
customElements.define('core-input', CoreInput);

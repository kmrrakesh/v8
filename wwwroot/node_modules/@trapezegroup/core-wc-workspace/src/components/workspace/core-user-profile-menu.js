/**  import litElement base class and html helper function */
import { LitElement, html, css, unsafeCSS } from 'lit-element';
import '@trapezegroup/core-wc-buttons/src/components/core-button.js';
import { translate as t } from 'lit-i18n/src/lit-i18n.js';
import { style as dropdownCSS } from '@trapezegroup/core-webui-styles/css-variables/dropdown.css.js';
import { unsafeHTML } from 'lit-html/directives/unsafe-html.js';
import { arrowDown } from '@trapezegroup/core-js-icons/src/lib/arrow.js';

/**
 * @typedef {object} User
 * @property {string} name
 * @property {string} imageUrl
 */
/** This is an example of a component which extends the litElement */
export class CoreUserProfileMenu extends LitElement {
    /** @inheritdoc */
    static get styles() {
        return [
            css`
                :host {
                    display: inline-block;
                }
                .dropdown {
                    outline: none;
                    width: 100%;
                    height: 100%;
                }
                .dropdown .icon {
                    --icon-color: var(--prim-button-txt);
                }
                .dropdown .icon svg {
                    width: 0.8rem !important;
                }
                .user-profile {
                    position: relative !important;
                    width: 12rem;
                    height: 2.8rem;
                    display: inline-block;
                    background-color: var(--nav-bg);
                    cursor: pointer;
                    transition: background-color 0.2s ease;
                    color: var(--prim-button-txt);
                    padding-top: 1rem;
                }
                .ui.dropdown .menu.menu {
                    background-color: var(--prim-dropdown-bg);
                    box-shadow: var(--prim-shdw);
                    display: none;
                    position: absolute !important;
                    transform: translate(calc(-50% + 10rem), 0px) !important;
                    min-width: 18rem !important;
                }
                .ui.dropdown .menu .item.item {
                    min-height: 4.5rem;
                    text-align: left;
                    line-height: 4.5rem;
                    border-bottom: 1px solid var(--prim-brd);
                    font-size: 1.5rem;
                }
                .ui.dropdown .menu > .item.item {
                    padding: 0rem 0rem 0rem 1.7rem !important;
                }
                .ui.dropdown .text {
                    font-size: 1.4rem;
                    color: #d7d9db;
                }
                .ui.avatar.image {
                    width: 3.2rem !important;
                    height: 3.2rem !important;
                    border-radius: 50%;
                }
                .dropdown .icon {
                    color: var(--sec-bg);
                }
                .logout-btn-div {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    height: 6rem;
                }
            `,
            unsafeCSS(dropdownCSS),
        ];
    }

    /** @inheritdoc */
    static get properties() {
        return {
            user: { type: Object },
        };
    }

    /** @inheritdoc */
    connectedCallback() {
        this.loadUserData();
        super.connectedCallback();
    }

    /** Loading the data from a mock JSON */
    loadUserData() {
        fetch('/assets/data/profile.json')
            .then(response => response.json())
            .then(data => {
                if (data) {
                    this.user = data;
                }
            });
    }

    /** Initializes the ui */
    firstUpdated() {
        jQuery(this.shadowRoot.querySelector('.dropdown')).dropdown({
            showOnFocus: false,
            transition: 'none',
            debug: true,
        });
    }
    /** We can initialize the properties here in the constructor */
    constructor() {
        // Must call superconstructor first.
        super();
        /** @type {User} */
        this.user = {
            name: 'Marie',
            imageUrl: '/assets/images/profile-pic.png',
        };
    }

    /** Change password screen to be displayed */
    changePassword() {
        const event = new CustomEvent('changePasswordClicked', {
            bubbles: true,
            composed: true,
            detail: { message: 'changePassword clicked' },
        });
        this.dispatchEvent(event);
    }

    /**
     * Displays the account settings screen
     */
    showAccountSettings() {
        const event = new CustomEvent('accountSettingsClicked', {
            bubbles: true,
            composed: true,
            detail: { message: 'accountSettings clicked' },
        });
        this.dispatchEvent(event);
    }

    /** Toggles the notification dialog visibility */
    show() {
        jQuery(this.shadowRoot.querySelector('.dropdown')).dropdown('show');
    }

    /**
     * Converts the string to camelcase string
     * @param {string} str string to be converted to localized key format
     * @returns {string} returns the camelcase converted string
     */
    createLocalizedKey(str) {
        return str.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (m, chr) => chr.toUpperCase());
    }

    /** @inheritdoc */
    render() {
        return html`<div class="user-profile" @click=${e => {
            e.stopPropagation();
            this.show();
        }}>
        <div class="ui dropdown">
            <div class="text">
                <img class="ui avatar image" src="${this.user.imageUrl}">
                ${this.user.name}
            </div>
            <i class="dropdown icon">${unsafeHTML(arrowDown)}</i>
            <div class="menu">
                ${this.contentTemplate}
                ${this.footerTemplate}
            </div>
        </div>
        </div>
        `;
    }

    /** @returns {import('lit-element').TemplateResult}
     * returns the content template for the popup
     */
    get contentTemplate() {
        const accountSettingsKey = `core-wc-workspace:${this.createLocalizedKey('Account Settings')}`;
        const changePwdLocaleKey = `core-wc-workspace:${this.createLocalizedKey('Change Password')}`;
        return html`
        <div class="item dropdown-item" @click=${e => {
            e.stopPropagation();
            this.showAccountSettings();
        }}>
            ${t(accountSettingsKey, {})}
          </div>
          <div class="item" @click=${e => {
              e.stopPropagation();
              this.changePassword();
          }}>
            ${t(changePwdLocaleKey, {})}
          </div>`;
    }

    /** @returns {import('lit-element').TemplateResult}
     * returns the header template for the dropdown
     */
    get footerTemplate() {
        const logOutLocaleKey = `core-wc-workspace:${this.createLocalizedKey('Log Out')}`;
        return html`<div class="logout-btn-div">
        <core-button button-type="positive" button-title="${t(logOutLocaleKey, {})}" @buttonAction=${
            this.logOut
        }></core-button>
      </div> `;
    }

    /** Logout action */
    logOut() {
        const event = new CustomEvent('logOut', {
            bubbles: true,
            composed: true,
            detail: { message: 'logout clicked' },
        });
        this.dispatchEvent(event);
    }
}
customElements.define('core-user-profile-menu', CoreUserProfileMenu);

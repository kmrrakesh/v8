/**  import litElement base class and html helper function */
// @ts-check
/* global jQuery */
import { LitElement, html, css, unsafeCSS } from 'lit-element';
import { translate as t } from 'lit-i18n/src/lit-i18n.js';
import { unsafeHTML } from 'lit-html/directives/unsafe-html.js';
import { render } from 'lit-html/lit-html.js';
import { bell } from '@trapezegroup/core-js-icons/src/lib/bell.js';
import '@trapezegroup/core-webui-styles/dist/theme-default/components/dropdown.js';
import '@trapezegroup/core-webui-styles/dist/theme-default/components/transition.js';
import { style as dropdownStyle } from '@trapezegroup/core-webui-styles/css-variables/dropdown.css.js';
import { notificationCardTemplate } from './core-notification-card.js';

/** This is an example of a component which extends the litElement */
export class CoreNotificationList extends LitElement {
    /** @inheritdoc */
    static get styles() {
        return [
            css`
                :host {
                    text-align: center;
                    width: 100%;
                    height: 100%;
                    display: inline-block;
                }
                .dropdown {
                    outline: none;
                    height: 100%;
                    width: 100%;
                }
                span.icon {
                    position: relative;
                    box-sizing: border-box;
                    width: 2.5rem;
                    height: 2.5rem;
                    top: 1rem;
                    display: inline-block;
                    background-color: var(--nav-bg);
                    cursor: pointer;
                    transition: background-color 0.2s ease;
                }
                span.icon[notification-count]::before {
                    content: attr(notification-count);
                    color: var(--prim-button-txt);
                    position: absolute;
                    font-size: 1rem;
                    text-align: center;
                    line-height: 1.4rem;
                    height: 1.4rem;
                    min-width: 1.4rem;
                    right: 7%;
                    border-radius: 50%;
                    background-color: var(--prim-error-bg);
                }
                span.icon[notification-count='0']:before {
                    display: none;
                }
                span.icon[notification-count] path {
                    fill: var(--col-15);
                    stroke: var(--col-15);
                }
                span.icon[notification-count='0'] path {
                    fill: transparent;
                    stroke: var(--off-bg);
                    transition: fill 0.2s ease;
                }
                .active span.icon {
                    background-color: var(--nav-sel-bg);
                }
                .ui.dropdown .menu.menu {
                    background-color: var(--prim-bg);
                    box-shadow: var(--prim-shdw);
                    display: none;
                    position: absolute;
                    min-width: 50rem;
                    max-width: 60rem;
                    transform: translate(calc(-50% + 2.5rem), 0);
                }
                .ui.dropdown .menu .header.header {
                    display: grid;
                    grid-template-columns: repeat(2, 1fr);
                    background-color: var(--prim-bg);
                    color: var(--prim-txt);
                    padding: 1.7rem;
                    margin: 0;
                    border-bottom: 1px solid var(--prim-brd);
                }
                .header .title-left {
                    text-align: left;
                    font-size: 1.4rem;
                    font-weight: bold;
                    text-transform: uppercase;
                }
                .header .title-right {
                    display: none; /* screen not implemented yet */
                    text-align: right;
                    font-weight: normal;
                    font-size: 1.3rem;
                    text-decoration: underline;
                    cursor: pointer;
                }
                #content-div {
                    max-height: 31.15rem;
                    overflow-y: auto;
                    overflow-x: hidden;
                }
                .notify-div {
                    border-bottom: 0.1rem solid var(--prim-brd);
                    text-align: left;
                    position: relative;
                }
                .no-notify-div {
                    font-weight: normal;
                    font-size: 1.4rem;
                    color: #5f757f;
                }
                .footer {
                    text-align: right;
                    font-size: 1.3rem;
                    padding: 1.7rem;
                    text-decoration: underline;
                    cursor: pointer;
                    background-color: var(--prim-bg);
                }
            `,
            unsafeCSS(dropdownStyle),
        ];
    }

    /** @inheritdoc */
    static get properties() {
        return {
            notifications: { type: Array },
        };
    }

    /** We can initialize the properties here in the constructor */
    constructor() {
        // Must call superconstructor first.
        super();

        // Initialize properties
        /** @type {any[]} */
        this.notifications = [];
    }

    /** @inheritdoc */
    render() {
        return html`
            <div class="ui dropdown">
                <span class="icon" notification-count="${this.notifications.length}" @click=${e => {
            e.stopPropagation();
            this.toggle();
        }}> 
                    ${unsafeHTML(bell)}
                </span>
                <div class="menu">
                    ${this.headerTemplate}
                    ${this.notifications.length > 0 ? this.contentTemplate : this.emptyNotificationsTemplate}
                    ${this.notifications.length > 0 ? this.footerTemplate : null}
                </div>
            </div>
        `;
    }

    /** @returns {import('lit-element').TemplateResult}
     * returns the header template for the dropdown
     */
    get headerTemplate() {
        return html`<div class="header">
            <span class="title-left">${t('notifications', {})}</span>
            ${
                this.notifications.length > 0
                    ? html`<span class="title-right" @click="${this.viewAll}">View All </span>
                      `
                    : html``
            }
        </div>`;
    }

    /** @returns {import('lit-element').TemplateResult}
     * returns the content template for the popup
     */
    get contentTemplate() {
        return html`<div id="content-div"></div>`;
    }

    /** @returns {import('lit-element').TemplateResult}
     * returns the header template for the dropdown
     */
    get footerTemplate() {
        return html`<div class="footer">
            <span @click="${this.clearAll}">${t('clearAll', {})} </span>
        </div>`;
    }

    /** @returns {import('lit-element').TemplateResult}
     * returns the content template for the dropdown
     */
    get emptyNotificationsTemplate() {
        return html`<div class="no-notify-div item">
        No new Notifications
        </div>`;
    }

    /** @inheritdoc */
    updated() {
        const contentDiv = this.shadowRoot.getElementById('content-div');
        if (this.notifications.length > 0) {
            render(this.notifications.map(notification => notificationCardTemplate(notification)), contentDiv);
        }
    }

    /** Initializes the ui */
    firstUpdated() {
        jQuery(this.shadowRoot.querySelector('.dropdown')).dropdown({
            showOnFocus: false,
            transition: 'none',
            debug: true,
        });
    }

    /** Opens the notification dialog */
    open() {
        jQuery(this.shadowRoot.querySelector('.dropdown')).dropdown('show');
    }

    /** Closes the notification dialog */
    close() {
        jQuery(this.shadowRoot.querySelector('.dropdown')).dropdown('hide');
    }

    /** Toggles the notification dialog visibility */
    toggle() {
        jQuery(this.shadowRoot.querySelector('.dropdown')).dropdown('toggle');
    }

    /** Clears all the notifications */
    clearAll() {
        this.notifications = [];
        // Bubbles up to the main component
        const event = new CustomEvent('clearAll', {
            bubbles: true,
            composed: true,
            detail: { message: 'clears all the notifications' },
        });
        this.dispatchEvent(event);
    }

    /** View all notifications */
    viewAll() {
        const event = new CustomEvent('viewAll', {
            bubbles: true,
            composed: true,
            detail: { message: 'view all notifications' },
        });
        this.dispatchEvent(event);
    }
}
customElements.define('core-notification-list', CoreNotificationList);

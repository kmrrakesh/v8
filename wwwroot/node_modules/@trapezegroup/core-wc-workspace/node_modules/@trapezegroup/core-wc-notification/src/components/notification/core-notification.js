/**  import litElement base class and html helper function */
// @ts-check
import { LitElement, html, css } from 'lit-element';
import { render } from 'lit-html/lit-html.js';
import { serverEventsListener } from '@trapezegroup/core-wc-mixins/src/mixins/serverEventsListener.mixin.js';
import './core-notification-list.js';
import { notificationCardTemplate } from './core-notification-card.js';
import './core-toast.js';

/** @typedef {{name: string}} Notifiction */

/** This is an example of a component which extends the litElement */
export class CoreNotification extends serverEventsListener(LitElement) {
    /** @inheritdoc */
    static get properties() {
        return {
            notifications: { type: Array },
        };
    }

    /** @inheritdoc */
    static get styles() {
        return [
            css`
                :host {
                    display: inline-block;
                }
            `,
        ];
    }

    /** We can initialize the properties here in the constructor */
    constructor() {
        // Must call superconstructor first.
        super();

        // Initialize properties
        this.notifications = [];
    }

    /**
     * @param { string } topic topic name to which the user is listening for notifications
     * @param { string } context name of the listener
     * @param { Array<Notifiction> | Notifiction } notifications array of notificationData returned from the server
     */
    serverEventReceived(topic, context, notifications) {
        if (notifications) {
            const notificationsCopy = notifications instanceof Array ? notifications : [notifications];
            // assigning data to the list
            this.notifications = [...this.notifications, ...notificationsCopy];
            // showing the notification list
            notificationsCopy.forEach(notification => {
                const toast = document.createElement('core-toast');
                render(notificationCardTemplate(notification), toast);
                this.shadowRoot.appendChild(toast);
            });
        }
    }

    /** @inheritdoc */
    render() {
        return html`
            <core-notification-list class="menu" .notifications=${this.notifications}></core-notification-list>
        `;
    }
    /** Initializes the UI */
    firstUpdated() {
        this.addEventListeners();
        this.listenFor('notification');
    }

    /** Adds event listeners */
    addEventListeners() {
        this.addEventListener('navigate', event => {});
        this.addEventListener('viewAll', event => {});
        this.addEventListener('clearAll', event => {
            this.notifications = [];
        });
    }
}
customElements.define('core-notification', CoreNotification);

/* global i18next, describe, beforeAll, afterAll, it, expect */
/* Jasmine will be loaded by the test framework. No need to import it. */
import '/node_modules/jquery/dist/jquery.min.js';
import { mockSignalR, cleanUp } from '/node_modules/@trapezegroup/core-wc-mixins/test/mock/serverEventsListener.js';
import '../../../../src/components/notification/core-notification.js';

const coreNotification = document.createElement('core-notification');
const coreNotificationList = document.createElement('core-notification-list');
const coreNotificationCard = document.createElement('core-notification-card');

describe('Custom Element CoreNotification', () => {
    beforeAll(done => {
        mockSignalR();
        document.body.appendChild(coreNotification);
        document.body.appendChild(coreNotificationList);
        document.body.appendChild(coreNotificationCard);
        coreNotificationCard.notification = {
            name: 'Trapeze.YardMgr.Abstractions.AssetParkedNotification',
            siteId: 'MAIN',
            assetId: '11002',
            boundaryId: 'Fuel',
        };
        i18next
            .init({
                lng: 'en',
                debug: true,
                resources: {
                    en: {
                        translation: {
                            'TrapezeYardMgrAbstractionsAssetParkedNotification-content':
                                'Asset {{notification.assetId}} parked in the location  {{notification.boundaryId}}, site {{notification.siteId}}',
                            'TrapezeYardMgrAbstractionsAssetParkedNotification-title': '{{notification.assetId}}',
                        },
                    },
                },
            })
            .then(done);
    });

    afterAll(() => {
        cleanUp();
        document.body.removeChild(coreNotification);
        document.body.removeChild(coreNotificationList);
        document.body.removeChild(coreNotificationCard);
    });

    it('Testing whether the notifications received is passed correctly to the list component', () => {
        expect(coreNotificationList.notifications.length).toBe(coreNotification.notifications.length);
    });
    it('Testing whether all the notifications received is shown as a toast', () => {
        const toasts = document.querySelectorAll('core-toast');
        expect(toasts.length).toBe(coreNotification.notifications.length);
    });
    it('check for the values in the core-notification-card', () => {
        const card = document.querySelector('core-notification-card');
        expect(card.shadowRoot.innerHTML).toContain('11002');
        expect(card.shadowRoot.innerHTML).toContain('Asset 11002 parked in the location  Fuel, site MAIN');
    });
});

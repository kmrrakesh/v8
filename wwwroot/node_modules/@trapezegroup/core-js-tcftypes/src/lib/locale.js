// @ts-check
import { Color } from '@trapezegroup/core-js-extensions/src/lib/color.js';
import { Parse, Format } from './format.js';

if ('Core' in window === false) {
    // @ts-ignore
    window.Core = {};
}

// @ts-ignore
if ('App' in window.Core === false) {
    // @ts-ignore
    window.Core.App = {};
}

// @ts-ignore
if ('locale' in window.Core.App === false) {
    // @ts-ignore
    window.Core.App.locale = {
        distancePrecision: 1, // Just to create object instead of null
        speedPrecision: 1,
        volumePrecision: 1,
        pressurePrecision: 1,
        accelerationPrecision: 1,
        temperaturePrecision: 1,
        fuelEconomyPrecision: 1,
        weightPrecision: 1,
    };
}

export const locale = {
    formatSpecs: {
        number: {
            255: 'ISO',
        },

        boolean: {
            1: '#', // 0,1
            2: 'Y,N',
            3: 'On,Off',
            4: 'True,False',
            5: 'Yes,No',
            6: '@boolean(O,X)',
            7: 'T,F',
            8: '@boolean(Y,)',
            9: 'X,',
            255: 'ISO', // 0,1
        },

        weekdays: {
            1: '@weekdays(0,#)', // weekdays as numbers : 12--56-
            2: '@weekdays(0,x)', // weekdays as letters : S-TWHF-
            3: '@weekdays(0,0)', // weekdays as ones and zeros	: 0110011
            4: '', // todo: weekdays as up to 31 ones and zeros (for month template)
            5: '', // todo: weekdays as up to 31 numbers (for month template, each week starts at 1 again with up to 4 weeks)
            6: '', // todo: weekdays as up to 31 letters (for month template, each week starts at S again with up to 4 weeks)
            7: '@weekdays(0,u)', // weekdays as unique letters	: UMTWHFS, U-TWHF-, etc.
            0x11: '@weekdays(1,#)', // weekdays as numbers with monday as first day of week	: 12--56-
            0x12: '@weekdays(1,x)', // weekdays as letters with monday as first day of week	: -TWHF-S
            0x15: '', // todo: weekdays as up to 31 numbers (for month template, each week starts at 1 again with up to 4 weeks) with monday as first day of week
            0x16: '', // todo: weekdays as up to 31 letters (for month template, each week starts at S again with up to 4 weeks) with monday as first day of week
            0x17: '@weekdays(1,u)', // weekdays as unique letters with monday as first day of week: MTWHFSU, -TWHF-U, etc.
            255: 'ISO', // 0110011
        },

        date: {
            1: 'yy-MM-dd',
            2: 'MM-dd-yyyy',
            3: 'MM-dd-yy',
            4: 'dd-MM-yyyy',
            5: 'dd-MM-yy',
            6: 'MMM dd, yyyy',
            7: 'MMM dd, yy',
            8: 'yyyy-MM-dd',
            255: 'ISO', // yyyyMMdd
        },

        datetime: {
            1: 'yyyy/MM/dd, HH:mm:ss:000',
            2: 'yyyy/MM/dd, HH:mm:ss',
            3: 'yyyy/MM/dd',
            4: 'HH:mm:ss:000',
            5: 'HH:mm:ss',
            6: 'RFC1123',
            7: 'yyyy-MM-dd HH:mm:ss',
            8: 'yyyy-MM-ddTHH:mm:ss.000',
            9: 'dd-MM-yyyy HH:mm:ss',
            255: 'ISO', // yyyyMMddTHHmmss
        },

        time: {
            1: '[hh]:mm:ss',
            2: '[hh]mm',
            3: 'h:mmapx',
            4: 'h:mm:ssapx',
            5: 'hmmapx',
            6: '[hh]:mm%', // remainder below a minute will be written as a trailing +
            7: 'h:mmapx%', // remainder below a minute will be written as a trailing +
            8: '[hh]:mm',
            9: '[m]',
            10: '[s]',
            11: '[h]',
            255: 'ISO', // THHmmss
        },

        timespan: {
            1: '@measurement(@render(-),m,4)@measurement(@render("[h]\\\\h"),h,4)@measurement(@render(mm), m, 2, @render(m))',
            2: '-[m]',
            3: '-@measurement(@render(mmm), m, 32):ss',
            4: '-[s]@units(s)',
            5: '-[m]%', // remainder below a minute will be written as a trailing +
            6: '-@measurement(@render("[h]\\\\h"),h,4)@measurement(@render(mm), m, 32):ss',
            7: '[hf]',
            // 8: "P@measurement(@render(\"[d]\\\\D\"),d,4)ThHmMsS", //TODO put back when days are supported on the server.
            8: '-PT[h]HmMsS',
            9: '-[h]\\hmm:ss:000',
            10: '-@measurement(@render([s]000), s, 8)\\m\\s',
            11: '-@measurement(@render("[d]\\\\d"),d,4)@measurement(@measurement(@render("h\\\\h"), h, 4)@measurement(@render("mm:ss"), s, 66, @render("mm:ss")),s,16)',
            12: '@measurement(@render(-),m,4)@measurement(@render("[h]\\\\h "), h, 4)@measurement(@render(mm), m, 2, @render(m))@units(min)',
            255: 'ISO', // -[s]
        },

        distance: {
            // @ts-ignore
            1: window.Core.App.locale.distancePrecision.km || '-#.#@units(km)', // kilometers : 10.0
            // @ts-ignore
            2: window.Core.App.locale.distancePrecision.mi || '-#.#@units(mi)', // miles : 10.0
            // @ts-ignore
            3: window.Core.App.locale.distancePrecision.ft || '-#.#@units(ft)', // feet : 10.0ft
            // @ts-ignore
            4: window.Core.App.locale.distancePrecision.yd || '-#.#@units(yd)', // yards : 10.0y
            // @ts-ignore
            5: window.Core.App.locale.distancePrecision.m || '-#.#@units(m)', // meters : 10.0m
            6: '-#.#@units(m)', // todo: metric auto : 12.2m, 1.4km
            7: '-#.#@units(mi)', // todo: imperial auto : 12.2ft, 1.4mi
            8: '-#.#@units(m)', // todo: miles and meters : 10.0mm, 12.2m, 1.4mi
            // @ts-ignore
            9: window.Core.App.locale.distancePrecision.mm || '-#.#@units(mm)', // millimeters : 10.0m
            255: 'ISO', // m
        },

        speed: {
            // @ts-ignore
            1: window.Core.App.locale.speedPrecision.mph || '-#.#@units(mph)', // Miles/Hour : 10.1mph
            // @ts-ignore
            2: window.Core.App.locale.speedPrecision.mps || '-#.#@units(mps)', // Meters/Second : 10.1mps
            // @ts-ignore
            3: window.Core.App.locale.speedPrecision.kph || '-#.#@units(kph)', // Kilometers/Hour : 10.1kph
            255: 'ISO', // mps
        },

        volume: {
            // @ts-ignore
            1: window.Core.App.locale.volumePrecision.L || '-#.#@units(L)', // LITERS
            // @ts-ignore
            2: window.Core.App.locale.volumePrecision.g || '-#.##@units(g)', // US_GALLONS
            // @ts-ignore
            3: window.Core.App.locale.volumePrecision.ig || '-#.##@units(ig)', // IMPERIAL_GALLONS
            255: 'ISO', // L
        },

        pressure: {
            // @ts-ignore
            1: window.Core.App.locale.pressurePrecision.kPa || '-#.#@units(kPa)', // KPA
            // @ts-ignore
            2: window.Core.App.locale.pressurePrecision.atm || '-#.#@units(atm)', // ATMOSPHERE
            // @ts-ignore
            3: window.Core.App.locale.pressurePrecision.psi || '-#.#@units(psi)', // PSI
            // @ts-ignore
            4: window.Core.App.locale.pressurePrecision.Pa || '-#.#@units(Pa)', // PA
            255: 'ISO', // Pa
        },

        acceleration: {
            // @ts-ignore
            1: window.Core.App.locale.accelerationPrecision.mps2 || '-#.#@units(mps2)', // MPS2
            // @ts-ignore
            2: window.Core.App.locale.accelerationPrecision.fps2 || '-#.#@units(fps2)', // FPS2
            // @ts-ignore
            3: window.Core.App.locale.accelerationPrecision.G || '-#.#@units(G)', // G
            255: 'ISO', // mps2
        },

        temperature: {
            // @ts-ignore
            1: window.Core.App.locale.temperaturePrecision.C || '-#.#@units(C)', // CELSIUS
            // @ts-ignore
            2: window.Core.App.locale.temperaturePrecision.K || '-#.#@units(K)', // KELVIN
            // @ts-ignore
            3: window.Core.App.locale.temperaturePrecision.F || '-#.#@units(F)', // FAHRENHEIT
            255: 'ISO', // K
        },

        fueleconomy: {
            // @ts-ignore
            1: window.Core.App.locale.fuelEconomyPrecision.L100km || '-#.#@units(L/100km)', // LITERS_PER_100KM todo: invert
            // @ts-ignore
            2: window.Core.App.locale.fuelEconomyPrecision.kmL || '-#.#@units(km/L)', // KM_PER_LITER
            // @ts-ignore
            3: window.Core.App.locale.fuelEconomyPrecision.mpig || '-#.#@units(mpig)', // MPG_IMPERIAL
            // @ts-ignore
            4: window.Core.App.locale.fuelEconomyPrecision.mpug || '-#.#@units(mpug)', // MPG_US
            255: 'ISO', // km/L
        },

        weight: {
            // @ts-ignore
            1: window.Core.App.locale.weightPrecision.kg || '-#.###@units(kg)', // Kilograms
            // @ts-ignore
            2: window.Core.App.locale.weightPrecision.g || '-#.#@units(g)', // Grams
            // @ts-ignore
            3: window.Core.App.locale.weightPrecision.t || '-#.###@units(t)', // Metric tonnes
            // @ts-ignore
            4: window.Core.App.locale.weightPrecision.lb || '-#.##@units(lb)', // Pounds
            // @ts-ignore
            5: window.Core.App.locale.weightPrecision.oz || '-#.#@units(oz)', // Ounces
            // @ts-ignore
            6: window.Core.App.locale.weightPrecision.cwt || '-#.##@units(cwt)', // Cwt
            // @ts-ignore
            7: window.Core.App.locale.weightPrecision.ton || '-#.##@units(ton)', // Tons
            8: '-#.#@units(kg)', // Todo: Metric auto
            9: '-#.#@units(lb)', // Todo: Imperial auto
            255: 'ISO', // kg
        },

        color: {
            1: { alpha: null, format: Color.FORMAT_CSS_RGB }, // TF_COLOR_CSS_AUTO
            2: { alpha: false, format: Color.FORMAT_HEX }, // TF_COLOR_COLORREF_HEX
            3: { alpha: false, format: Color.FORMAT_DEC }, // TF_COLOR_COLORREF
            4: { alpha: true, format: Color.FORMAT_HEX }, // TF_COLOR_ARGB_HEX
            5: { alpha: true, format: Color.FORMAT_DEC }, // TF_COLOR_ARGB
            6: { alpha: false, format: Color.FORMAT_CSS_HEX }, // TF_COLOR_CSS_HEX
            7: { alpha: true, format: Color.FORMAT_CSS_HEX }, // TF_COLOR_CSS_HEXA
            8: { alpha: false, format: Color.FORMAT_CSS_RGB }, // TF_COLOR_CSS_RGB
            9: { alpha: true, format: Color.FORMAT_CSS_RGB }, // TF_COLOR_CSS_RGBA
            10: { alpha: false, format: Color.FORMAT_CSS_HSL }, // TF_COLOR_CSS_HSL
            11: { alpha: true, format: Color.FORMAT_CSS_HSL }, // TF_COLOR_CSS_HSLA
            255: '', // TF_RAW
        },

        colorAlpha: {
            1: { alpha: null, format: Color.FORMAT_CSS_RGB }, // TF_COLOR_CSS_AUTO
            2: { alpha: false, format: Color.FORMAT_HEX }, // TF_COLOR_COLORREF_HEX
            3: { alpha: false, format: Color.FORMAT_DEC }, // TF_COLOR_COLORREF
            4: { alpha: true, format: Color.FORMAT_HEX }, // TF_COLOR_ARGB_HEX
            5: { alpha: true, format: Color.FORMAT_DEC }, // TF_COLOR_ARGB
            6: { alpha: false, format: Color.FORMAT_CSS_HEX }, // TF_COLOR_CSS_HEX
            7: { alpha: true, format: Color.FORMAT_CSS_HEX }, // TF_COLOR_CSS_HEXA
            8: { alpha: false, format: Color.FORMAT_CSS_RGB }, // TF_COLOR_CSS_RGB
            9: { alpha: true, format: Color.FORMAT_CSS_RGB }, // TF_COLOR_CSS_RGBA
            10: { alpha: false, format: Color.FORMAT_CSS_HSL }, // TF_COLOR_CSS_HSL
            11: { alpha: true, format: Color.FORMAT_CSS_HSL }, // TF_COLOR_CSS_HSLA
            255: '', // TF_RAW
        },

        colorRef: {
            1: { alpha: false, format: Color.FORMAT_CSS_RGB }, // TF_COLOR_CSS_AUTO
            2: { alpha: false, format: Color.FORMAT_HEX }, // TF_COLOR_COLORREF_HEX
            3: { alpha: false, format: Color.FORMAT_DEC }, // TF_COLOR_COLORREF
            4: { alpha: true, format: Color.FORMAT_HEX }, // TF_COLOR_ARGB_HEX
            5: { alpha: true, format: Color.FORMAT_DEC }, // TF_COLOR_ARGB
            6: { alpha: false, format: Color.FORMAT_CSS_HEX }, // TF_COLOR_CSS_HEX
            7: { alpha: true, format: Color.FORMAT_CSS_HEX }, // TF_COLOR_CSS_HEXA
            8: { alpha: false, format: Color.FORMAT_CSS_RGB }, // TF_COLOR_CSS_RGB
            9: { alpha: true, format: Color.FORMAT_CSS_RGB }, // TF_COLOR_CSS_RGBA
            10: { alpha: false, format: Color.FORMAT_CSS_HSL }, // TF_COLOR_CSS_HSL
            11: { alpha: true, format: Color.FORMAT_CSS_HSL }, // TF_COLOR_CSS_HSLA
            255: '', // TF_RAW
        },
    },

    parseSpecs: {
        number: {},

        weekdays: {
            1: '0#######', // weekdays as numbers : 12--56-
            2: '0xxxxxxx', // weekdays as letters : S-TWHF-
            3: '00000000', // weekdays as ones and zeros	: 0110011
            4: '', // todo: weekdays as up to 31 ones and zeros (for month template)
            5: '', // todo: weekdays as up to 31 numbers (for month template, each week starts at 1 again with up to 4 weeks)
            6: '', // todo: weekdays as up to 31 letters (for month template, each week starts at S again with up to 4 weeks)
            7: '0uuuuuuu', // weekdays as unique letters	: UMTWHFS, U-TWHF-, etc.
            0x11: '1#######', // weekdays as numbers with monday as first day of week	: 12--56-
            0x12: '1xxxxxxx', // weekdays as letters with monday as first day of week	: S-TWHF-
            0x15: '', // todo: weekdays as up to 31 numbers (for month template, each week starts at 1 again with up to 4 weeks) with monday as first day of week
            0x16: '', // todo: weekdays as up to 31 letters (for month template, each week starts at S again with up to 4 weeks) with monday as first day of week
            0x17: '1uuuuuuu', // weekdays as unique letters with monday as first day of week: MTWHFSU, -TWHF-U, etc.
            255: 'ISO', // 0110011
        },

        date: {
            1: 'yMd',
            2: 'Mdy',
            3: 'Mdy',
            4: 'dMy',
            5: 'dMy',
            6: 'Mdy',
            7: 'Mdy',
            8: 'yMd',
            255: 'ISO',
        },

        datetime: {
            1: 'yMdHms0',
            2: 'yMdHms0',
            3: 'yMdHms0',
            4: 'yMdHms0',
            5: 'yMdHms0',
            6: 'dMyHms0',
            7: 'yMdHms0',
            8: 'yMdHms0',
            9: 'dMyHms0',
            255: 'ISO',
        },

        // todo: time parsecs need to be simplified from  format specs
        time: {
            1: 'Hms',
            2: 'Hm',
            3: 'hm',
            4: 'hms',
            5: 'hm',
            6: 'Hms',
            7: 'hms',
            8: 'Hm',
            9: 'm',
            10: 's',
            11: 'h',
            255: 'ISO',
        },

        // todo: timespan parsecs need to be simplified from  format specs
        timespan: {
            1: 'm',
            2: 'm',
            3: 'm',
            4: 's',
            5: 'm',
            6: 'hms',
            7: 's.00', // todo: centiseconds
            8: 'dhms',
            9: 'hms.000', // todo: milliseconds
            10: 's.000', // todo: milliseconds
            11: 'dhms', // todo: auto. "2y 1m", "3m 2w", "5w 2d", "2d 5h", "5h 31m", "2m 30s"
            12: 'm',
            255: 'ISO',
        },

        distance: {
            1: 'km', // kilometers
            2: 'mi', // miles
            3: 'ft', // feet
            4: 'yd', // yards
            5: 'm', // meters
            6: 'ISO', // todo: metric auto : 12.2m, 1.4km
            7: 'ISO', // todo: imperial auto : 12.2ft, 1.4mi
            8: 'ISO', // todo: miles and meters : 12.2mm, 12.2m, 1.4mi
            9: 'mm', // millimeters
            255: 'ISO', // m
        },

        speed: {
            1: 'mph', // Miles/Hour
            2: 'mps', // Meters/Second
            3: 'kph', // Kilometers/Hour
            255: 'ISO', // mps
        },

        volume: {
            1: 'L', // LITERS
            2: 'g', // US_GALLONS
            3: 'ig', // IMPERIAL_GALLONS
            255: 'ISO', // L
        },

        pressure: {
            1: 'kPa', // KPA
            2: 'atm', // ATMOSPHERE
            3: 'psi', // PSI
            4: 'Pa', // PA
            255: 'ISO', // Pa
        },

        acceleration: {
            1: 'mps2', // MPS2
            2: 'fps2', // FPS2
            3: 'G', // G
            255: 'ISO', // mps2
        },

        temperature: {
            1: 'C', // CELSIUS
            2: 'K', // KELVIN
            3: 'F', // FAHRENHEIT
            255: 'ISO', // K
        },

        fueleconomy: {
            1: 'L/100km', // LITERS_PER_100KM
            2: 'km/L', // KM_PER_LITER
            3: 'mpig', // MPG_IMPERIAL
            4: 'mpug', // MPG_US
            255: 'ISO', // km/L
        },

        weight: {
            1: 'kg', // Kilograms
            2: 'g', // Grams
            3: 't', // Metric tonnes
            4: 'lb', // Pounds
            5: 'oz', // Ounces
            6: 'cwt', // Cwt
            7: 'ton', // Tons
            8: 'ISO', // Todo: Metric auto
            9: 'ISO', // Todo: Imperial auto
            255: 'ISO', // kg
        },

        color: {},

        colorAlpha: {},

        colorRef: {},
    },

    /**
     * @param {string|number} localeKey
     * @param {string} dataType
     * @returns {string|*}
     */
    getFormatSpec(localeKey, dataType) {
        return locale.formatSpecs[dataType][localeKey];
    },

    /**
     * @param {string} localeKey
     * @param {string} dataType
     * @returns {string}
     */
    getParseSpec(localeKey, dataType) {
        return locale.parseSpecs[dataType][localeKey];
    },

    /**
     * use to convert the internal format string to a displayable/localized string if you have a numeric localeKey (enum)
     * use the optParseSpec only when you need to override the use of the standard parseSpec
     * @param {*} localeContext
     * @param {*} localeKey
     * @param {*} dataType
     * @param {*} standardText
     * @param {*} [optParseSpec]
     */
    toLocalByKey(localeContext, localeKey, dataType, standardText, optParseSpec) {
        if (standardText == null || standardText === '') return '';

        const formatSpec = locale.getFormatSpec(localeKey, dataType) || localeKey;
        return locale.toLocalBySpec(localeContext, formatSpec, dataType, standardText, optParseSpec);
    },

    /**
     * use to convert the internal format string to a displayable/localized string if you have a formatSpec string (specifier)
     * use the optParseSpec only when you need to override the use of the standard parseSpec
     * @param {*} localeContext
     * @param {*} formatSpec
     * @param {*} dataType
     * @param {*} standardText
     * @param {*} [optParseSpec]
     */
    toLocalBySpec(localeContext, formatSpec, dataType, standardText, optParseSpec) {
        if (standardText == null || standardText === '') return '';

        const standardParser = Parse.getParser(
            localeContext,
            dataType,
            optParseSpec == null ? Parse.STANDARD : optParseSpec,
        );
        const formatter = Format.getFormatter(localeContext, dataType, formatSpec);
        const output = formatter.format(standardParser.parse(`${standardText}`));
        return output;
    },

    /**
     * use to convert from text input or a displayable/localized string to the internal format string if you have a numeric localeKey (enum)
     * use the optFormatSpec only when you need to override the use of the standard formatSpec
     * @param {*} localeContext
     * @param {*} localeKey
     * @param {*} dataType
     * @param {*} localText
     * @param {*} [optFormatSpec]
     */
    fromLocalByKey(localeContext, localeKey, dataType, localText, optFormatSpec) {
        if (localText == null || localText === '') return '';

        const parseSpec = locale.getParseSpec(localeKey, dataType) || localeKey;
        return locale.fromLocalBySpec(localeContext, parseSpec, dataType, localText, optFormatSpec);
    },

    /**
     * use to convert from text input or a displayable/localized string to the internal format string if you have a parseSpec string (specifier)
     * use the optFormatSpec only when you need to override the use of the standard formatSpec
     * @param {*} localeContext
     * @param {*} parseSpec
     * @param {*} dataType
     * @param {*} localText
     * @param {*} [optFormatSpec]
     */
    fromLocalBySpec(localeContext, parseSpec, dataType, localText, optFormatSpec) {
        if (localText == null || localText === '') return '';

        const parser = Parse.getParser(localeContext, dataType, parseSpec);
        const standardFormatter = Format.getFormatter(
            localeContext,
            dataType,
            optFormatSpec == null ? Format.STANDARD : optFormatSpec,
        );
        const output = standardFormatter.format(parser.parse(`${localText}`));
        return output;
    },
};

let connectionRunning = false;
let connectionUrl = null;

export const isConnectionRunning = function() { return connectionRunning; };
export const getConnectionUrl = function() { return connectionUrl; };
export const invoked = [];
export const listeners = {};
export const startPromise = Promise.resolve();
export const dataPushed = [];
export const cleanUp = function() {
    delete window.signalR;
}

export const mockSignalR = function() {
    window.signalR = {};
    /** Mock Connection Builder */
    window.signalR.HubConnectionBuilder = class HubConnectionBuilder {
        /** Mock with syncronous implemetations */
        withUrl(url) {
            connectionUrl = url;
            const closedCallbacks = [];
            return {
                build: () => ({
                    start: () => {
                        connectionRunning = true;
                        return startPromise;
                    },
                    stop: () => {
                        connectionRunning = false;
                        return Promise.resolve();
                    },
                    invoke: (method, context) => {
                        invoked.push({ method, context });
                        return Promise.resolve();
                    },
                    on: (name, callback) => {
                        listeners[name] = callback;
                    },
                    off: (name, callback) => {
                        delete listeners[name];
                    },
                    onclose: callback => {
                        closedCallbacks.push(callback);
                    },
                    closedCallbacks,
                    connection: {
                        connectionState: 2,
                    },
                }),
            };
        }
    };
};

/* global describe, it, expect */
/* Jasmine will be loaded by the test framework. No need to import it. */

import { uiState } from '../../../src/mixins/uiState.mixin.js';

/**
 * Test class
 */
class TestUiState extends uiState(HTMLElement, 'TestUiState') {
    /** @inheritdoc */
    constructor() {
        super();

        this.testProperty = 'somePropertyValue';
    }

    /** @inheritdoc */
    getUiState() {
        return {
            testProperty: this.testProperty,
            testValue: 123,
        };
    }

    /** @inheritdoc */
    setUiState(uiStateValue) {
        this.testProperty = uiStateValue.testProperty;
    }
}

customElements.define('unit-ui-state', TestUiState);

/** */
class TestUiState2 extends TestUiState {
    /** @inheritdoc */
    constructor() {
        super();
    }

    /** @returns {string} */
    getStatekey() {
        return 'TestUiState2';
    }
}

customElements.define('unit-ui-state2', TestUiState2);

describe('uiState.mixin', () => {
    it('should have connection url set and be correct', done => {
        // Set the initial uiState
        const testUiState = document.createElement('unit-ui-state');
        document.body.appendChild(testUiState);
        testUiState.testProperty = 'foobar';
        testUiState.testPropertyControl = 'notpersisted';
        document.body.removeChild(testUiState);
        // Next element should use the previous elements state
        const testUiState2 = document.createElement('unit-ui-state');

        testUiState2.uiStateWhenReady.then(uiStateValue => {
            document.body.appendChild(testUiState2);

            expect(testUiState2.testProperty).toEqual('foobar');
            expect(testUiState2.testPropertyControl).toBeUndefined();

            expect(uiStateValue.testValue).toEqual(123);
            expect(uiStateValue.testProperty).toEqual('foobar');
            expect(uiStateValue.testPropertyControl).toBeUndefined();

            document.body.removeChild(testUiState2);
            done();
        });
    });

    it('should be able to use getStateKey to defien the uiState key', done => {
        // Set the initial uiState
        const testUiState = document.createElement('unit-ui-state2');
        document.body.appendChild(testUiState);
        testUiState.testProperty = 'cashew';
        testUiState.testPropertyControl = 'notpersisted';
        document.body.removeChild(testUiState);
        // Next element should use the previous elements state
        const testUiState2 = document.createElement('unit-ui-state2');

        testUiState2.uiStateWhenReady.then(uiStateValue => {
            document.body.appendChild(testUiState2);

            expect(testUiState2.testProperty).toEqual('cashew');
            expect(testUiState2.testPropertyControl).toBeUndefined();

            expect(uiStateValue.testValue).toEqual(123);
            expect(uiStateValue.testProperty).toEqual('cashew');
            expect(uiStateValue.testPropertyControl).toBeUndefined();

            document.body.removeChild(testUiState2);
            done();
        });
    });
});

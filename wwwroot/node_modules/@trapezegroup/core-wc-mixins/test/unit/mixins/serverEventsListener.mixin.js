/* global describe, beforeAll, afterAll, it, expect */
/* Jasmine will be loaded by the test framework. No need to import it. */

import {
    dataPushed,
    getConnectionUrl,
    invoked,
    isConnectionRunning,
    listeners,
    mockSignalR,
    startPromise,
    cleanUp } from '../../mock/serverEventsListener.js';
import { serverEventsListener } from '../../../src/mixins/serverEventsListener.mixin.js';

/**
 * Test class
 */
class TestServerEventsListener extends serverEventsListener(HTMLElement) {
    /**
     * Test implementation
     * @param {string} topic
     * @param {string} context
     * @param {any} data
     */
    serverEventReceived(topic, context, data) {
        dataPushed.push({
            topic,
            context,
            data,
        });
    }

    /** @inheritdoc */
    connectedCallback() {
        this.hasAttribute('update-all') ? this.listenFor('testTopic') : this.listenFor('testTopic', 'testContext');
    }
}

customElements.define('unit-server-events-listener', TestServerEventsListener);

const testServerEventsListenerAll = document.createElement('unit-server-events-listener');
testServerEventsListenerAll.setAttribute('update-all', 'true');
const testServerEventsListener = document.createElement('unit-server-events-listener');

describe('serverEventsListener.mixin', () => {
    beforeAll(() => {
        mockSignalR();
        document.body.appendChild(testServerEventsListener);
        document.body.appendChild(testServerEventsListenerAll);
    });

    afterAll(() => {
        cleanUp();
        document.body.removeChild(testServerEventsListener);
        document.body.appendChild(testServerEventsListenerAll);
    });

    it('should have connection url set and be correct', () => {
        expect(isConnectionRunning()).toBeTruthy();
        expect(getConnectionUrl()).toEqual('/signalr/testTopic');
    });

    it('should have listeners registered', () => {
        expect('Update' in listeners).toBeTruthy();
        expect('UpdateAll' in listeners).toBeTruthy();
    });

    it('should respond to data push for context', () => {
        const dataPushedLength = dataPushed.length;
        listeners.Update('testContext', { value: 'should respond to data push for context' });
        expect(dataPushed.length).toEqual(dataPushedLength + 1);
        const result = dataPushed[dataPushed.length - 1];
        expect(result.topic).toEqual('testTopic');
        expect(result.context).toEqual('testContext');
        expect(result.data.value).toEqual('should respond to data push for context');
    });

    it('should respond to data push without context', () => {
        const dataPushedLength = dataPushed.length;
        listeners.UpdateAll({ value: 'should respond to data push without context' });
        expect(dataPushed.length).toEqual(dataPushedLength + 1);
        const result = dataPushed[dataPushed.length - 1];
        expect(result.topic).toEqual('testTopic');
        expect(result.data.value).toEqual('should respond to data push without context');
    });
});

/* Mock for SignalR */

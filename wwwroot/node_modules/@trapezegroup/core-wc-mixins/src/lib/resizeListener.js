// @ts-check

let resizeListeners = null;
let resizeTimerID = null;

/**
 * Starts the resize event handler.  The resize event handler listens to window resize events.
 * The resize event handler is responsible for notifying any containers when a resize event has occurred that requires containers to recalculate their size and resize their content.
 */
function initResizeHandler() {
    if (resizeListeners !== null) return;

    resizeListeners = [];
    window.addEventListener('resize', delayedInvokeResizeHandler);
}

// :NSvoid rsl_delayedInvokeResizeHandler(Element src)
/**
 * Resize handler
 * @param {*} src - if triggered directly (usually by one of the containers), instead of by a resize event, the src can be used to identify the source container so it can avoid resizing itself again in a potentially endless loop
 */
function delayedInvokeResizeHandler(src) {
    if (resizeTimerID) clearTimeout(resizeTimerID);
    if (src.nodeType) resizeTimerID = setTimeout(invokeResizeHandler.bind(this, src), 500);
    else resizeTimerID = setTimeout(invokeResizeHandler, 500);
}

/**
 * Event listener for the resize event handler.  Receives a resize event and distributes it to containers and other registered resize event listeners.
 * @param {*} src - if triggered directly (usually by one of the containers), instead of by a resize event, the src can be used to identify the source container so it can avoid resizing itself again in a potentially endless loop
 */
function invokeResizeHandler(src) {
    resizeTimerID = null;

    if (resizeListeners) {
        // For resize at window level, in FireFox, the src is an int.
        const source = src == null || !isNaN(src) ? document.body : src;
        for (let ix = 0; ix < resizeListeners.length; ix++) {
            const resizeListener = resizeListeners[ix];

            if (resizeListener) {
                // If resizeListener is on a node that is NOT a child of the source then DO NOT fire doResizeEvent
                const listenerNode = resizeListener.nodeType ? resizeListener : resizeListener.node;
                if (source && source.nodeType && source.nodeType === 1 && listenerNode && listenerNode.nodeType === 1) {
                    // console.log( "rsl node", ix, resizeListener, source );

                    const isSourceAncestor = source.contains(listenerNode);
                    if (isSourceAncestor) {
                        const stopResizePropagation = (listenerNode.parentNode || listenerNode).closest(
                            '[stopResizePropagation]',
                        );
                        if (
                            !stopResizePropagation ||
                            stopResizePropagation === listenerNode ||
                            !source.contains(stopResizePropagation)
                        )
                            if (resizeListener.doResizeEvent) resizeListener.doResizeEvent(source);
                            else if (resizeListener.onResize) resizeListener.onResize(source);
                    }
                } else if (resizeListener.doResizeEvent) {
                    resizeListener.doResizeEvent(source);
                } else if (resizeListener.onResize) {
                    resizeListener.onResize(source);
                }
            }
        }
    }
}

/**
 * Register a resize event listener with the resize event handler.
 * @param {function} resizeListener - the resize event listener to be registered
 */
export function addResizeListener(resizeListener) {
    initResizeHandler();
    resizeListeners[resizeListeners.length] = resizeListener;
}

/**
 * Deregister a resize event listener from the resize event handler.
 * @param {function} resizeListener - the resize event listener to be deregistered
 */
export function removeResizeListener(resizeListener) {
    if (!resizeListener) return;

    for (let ix = 0; ix < resizeListeners.length; ix++) {
        if (resizeListener === resizeListeners[ix]) {
            resizeListeners[ix] = null;
            resizeListeners.splice(ix, 1);
        }
    }
}

/* eslint-disable no-bitwise */
import { clone } from '@trapezegroup/core-js-extensions/src/lib/json.js';
import { Color } from './color.js';

// @ts-check

/**
 * Returns the modulus value. The % operator returns the remainder value.
 * @param {number} n -
 * @param {number} m -
 */
export function mod(n, m) {
    return (n % m + m) % m;
}

const named = {
    aliceblue: '#f0f8ff',
    antiquewhite: '#faebd7',
    aqua: '#00ffff',
    aquamarine: '#7fffd4',
    azure: '#f0ffff',
    beige: '#f5f5dc',
    bisque: '#ffe4c4',
    black: '#000000',
    blanchedalmond: '#ffebcd',
    blue: '#0000ff',
    blueviolet: '#8a2be2',
    brown: '#a52a2a',
    burlywood: '#deb887',
    cadetblue: '#5f9ea0',
    chartreuse: '#7fff00',
    chocolate: '#d2691e',
    coral: '#ff7f50',
    cornflowerblue: '#6495ed',
    cornsilk: '#fff8dc',
    crimson: '#dc143c',
    cyan: '#00ffff',
    darkblue: '#00008b',
    darkcyan: '#008b8b',
    darkgoldenrod: '#b8860b',
    darkgray: '#a9a9a9',
    darkgrey: '#a9a9a9',
    darkgreen: '#006400',
    darkkhaki: '#bdb76b',
    darkmagenta: '#8b008b',
    darkolivegreen: '#556b2f',
    darkorange: '#ff8c00',
    darkorchid: '#9932cc',
    darkred: '#8b0000',
    darksalmon: '#e9967a',
    darkseagreen: '#8fbc8f',
    darkslateblue: '#483d8b',
    darkslategray: '#2f4f4f',
    darkslategrey: '#2f4f4f',
    darkturquoise: '#00ced1',
    darkviolet: '#9400d3',
    deeppink: '#ff1493',
    deepskyblue: '#00bfff',
    dimgray: '#696969',
    dimgrey: '#696969',
    dodgerblue: '#1e90ff',
    firebrick: '#b22222',
    floralwhite: '#fffaf0',
    forestgreen: '#228b22',
    fuchsia: '#ff00ff',
    gainsboro: '#dcdcdc',
    ghostwhite: '#f8f8ff',
    gold: '#ffd700',
    goldenrod: '#daa520',
    gray: '#808080',
    grey: '#808080',
    green: '#008000',
    greenyellow: '#adff2f',
    honeydew: '#f0fff0',
    hotpink: '#ff69b4',
    indianred: '#cd5c5c',
    indigo: '#4b0082',
    ivory: '#fffff0',
    khaki: '#f0e68c',
    lavender: '#e6e6fa',
    lavenderblush: '#fff0f5',
    lawngreen: '#7cfc00',
    lemonchiffon: '#fffacd',
    lightblue: '#add8e6',
    lightcoral: '#f08080',
    lightcyan: '#e0ffff',
    lightgoldenrodyellow: '#fafad2',
    lightgray: '#d3d3d3',
    lightgrey: '#d3d3d3',
    lightgreen: '#90ee90',
    lightpink: '#ffb6c1',
    lightsalmon: '#ffa07a',
    lightseagreen: '#20b2aa',
    lightskyblue: '#87cefa',
    lightslategray: '#778899',
    lightslategrey: '#778899',
    lightsteelblue: '#b0c4de',
    lightyellow: '#ffffe0',
    lime: '#00ff00',
    limegreen: '#32cd32',
    linen: '#faf0e6',
    magenta: '#ff00ff',
    maroon: '#800000',
    mediumaquamarine: '#66cdaa',
    mediumblue: '#0000cd',
    mediumorchid: '#ba55d3',
    mediumpurple: '#9370d8',
    mediumseagreen: '#3cb371',
    mediumslateblue: '#7b68ee',
    mediumspringgreen: '#00fa9a',
    mediumturquoise: '#48d1cc',
    mediumvioletred: '#c71585',
    midnightblue: '#191970',
    mintcream: '#f5fffa',
    mistyrose: '#ffe4e1',
    moccasin: '#ffe4b5',
    navajowhite: '#ffdead',
    navy: '#000080',
    oldlace: '#fdf5e6',
    olive: '#808000',
    olivedrab: '#6b8e23',
    orange: '#ffa500',
    orangered: '#ff4500',
    orchid: '#da70d6',
    palegoldenrod: '#eee8aa',
    palegreen: '#98fb98',
    paleturquoise: '#afeeee',
    palevioletred: '#d87093',
    papayawhip: '#ffefd5',
    peachpuff: '#ffdab9',
    peru: '#cd853f',
    pink: '#ffc0cb',
    plum: '#dda0dd',
    powderblue: '#b0e0e6',
    purple: '#800080',
    red: '#ff0000',
    rosybrown: '#bc8f8f',
    royalblue: '#4169e1',
    saddlebrown: '#8b4513',
    salmon: '#fa8072',
    sandybrown: '#f4a460',
    seagreen: '#2e8b57',
    seashell: '#fff5ee',
    sienna: '#a0522d',
    silver: '#c0c0c0',
    skyblue: '#87ceeb',
    slateblue: '#6a5acd',
    slategray: '#708090',
    slategrey: '#708090',
    snow: '#fffafa',
    springgreen: '#00ff7f',
    steelblue: '#4682b4',
    tan: '#d2b48c',
    teal: '#008080',
    thistle: '#d8bfd8',
    tomato: '#ff6347',
    // 'transparent':'rgba(0,0,0,0)',
    turquoise: '#40e0d0',
    violet: '#ee82ee',
    wheat: '#f5deb3',
    white: '#ffffff',
    whitesmoke: '#f5f5f5',
    yellow: '#ffff00',
    yellowgreen: '#9acd32',
};

/**
 * Blend colors end and start with weight from 0 to 1, 0.5 being a 50/50 blend, can reuse a previously allocated Color object for the result
 * @param {Color} start - The starting color
 * @param {Color} end - The ending color
 * @param {number} weight - A ratio from 0 to 1 indicating the amount of end color to use from the start color where 0 only blends the start color and 1 only blends the end color
 * @param {Color} [obj] - Provide a Color object to reuse
 * @returns {Color} A Color object. If obj is passed, it will be the return value.
 */
export const blendColors = function blendColors(start, end, weight, obj) {
    const t = obj || new Color();
    ['r', 'g', 'b', 'a'].forEach(x => {
        t[x] = start[x] + (end[x] - start[x]) * weight;
        if (x !== 'a') {
            t[x] = Math.round(t[x]);
        }
    });
    return t;
};

/**
 * Returns either black or white
 * @param {*} backgroudColor - The background color value. See {@link Color#setColor}.
 * @param {Color} [obj] - Provide a Color object to reuse
 * @returns {Color} A Color object. If obj is passed, it will be the return value.
 */
export const fontColorFromBackground = function fontColorFromBackground(backgroudColor, obj) {
    const t = obj || new Color();
    t.setColor(backgroudColor);
    const contrastThreshold = 128;
    const fontColor = t.getContrast() > contrastThreshold ? 'black' : 'white';
    t.setColor(fontColor);
    return t;
};

/**
 * Returns a `Color` instance from a string of the form "rgb(...)" or "rgba(...)".
 * Optionally accepts a `Color` object to update with the parsed value and return instead of creating a new object.
 * @param {String} color - The CSS color value in rgb or rgba notation
 * @param {Color} [obj] - Provide a Color object to reuse
 * @returns {Color} A Color object. If obj is passed, it will be the return value.
 */
export const colorFromRgb = function colorFromRgb(color, obj) {
    const m = color.toLowerCase().match(/^rgba?\(([\s\.,0-9]+)\)/);
    return m && colorFromArray(m[1].split(/\s*,\s*/), obj);
};

/**
 * Converts a hex string with a '#' prefix to a color object. Supports 12-bit #rgb shorthand.
 * Optionally accepts a `Color` object to update with the parsed value.
 * @param {string} color - The CSS color value in the hex notation. Additionally, the color can contain the alpha channel formatted as #argb.
 * @param {Color} [obj] - Provide a Color object to reuse
 * @returns {Color} A Color object. If obj is passed, it will be the return value.
 * @example
 *   var thing = colorFromHex("#ededed"); // grey, longhand
 * @example
 *   var thing = colorFromHex("#000"); // black, shorthand
 */
export const colorFromHex = function colorFromHex(color, obj) {
    if (color[0] === '#') {
        const t = obj || new Color();
        const len = color.length;
        const bits = color.length === 4 || color.length === 5 ? 4 : 8;
        const mask = (1 << bits) - 1;

        let colorNum = Number(`0x${color.substr(1)}`);
        if (isNaN(colorNum)) return null;

        (len === 5 || len === 9 ? ['b', 'g', 'r', 'a'] : ['b', 'g', 'r']).forEach(x => {
            const c = colorNum & mask;
            colorNum >>= bits;
            t[x] = bits === 4 ? 17 * c : c;
            if (x === 'a') t[x] /= 255;
        });
        if (len === 4 || len === 7) t.a = 1;
        return t;
    }
    return null;
};

/**
 * Builds a `Color` from a 3 element array, mapping each element in sequence to the hsl(a) values of the color.
 * @example
 *   var myColor = colorFromHsl([0,1,0.5]); // red, #ff0000
 * @param {string|number[]} color - The CSS color value in the hsl or hsla notation.
 * @param {Color} [obj] - Provide a Color object to reuse
 * @returns {Color} A Color object. If obj is passed, it will be the return value.
 */
export const colorFromHsl = function colorFromHsl(color, obj) {
    let colorArray = color;
    if (typeof colorArray === 'string') {
        const m = colorArray.toLowerCase().match(/^hsla?\(([\s\.,0-9%]+)\)/);
        if (!m) {
            return null;
        }
        colorArray = m[1].split(/\s*,\s*/).map(
            (value, i) =>
                // eslint-disable-next-line no-nested-ternary
                i ? (i === 3 ? parseFloat(value) : parseInt(value, 10) / 100) : parseInt(value, 10) / 360,
        );
    }

    const t = obj || new Color();
    const h = colorArray[0] * 360;
    const s = colorArray[1];
    const l = colorArray[2];
    const a = colorArray[3] !== undefined ? colorArray[3] : 1;
    let r;
    let g;
    let b;

    const c = (1 - Math.abs(2 * l - 1)) * s;
    const h1 = h / 60;
    const x = c * (1 - Math.abs(mod(h1, 2) - 1));
    const m = l - c * 0.5;

    if (h1 >= 0 && h1 < 1) {
        r = c;
        g = x;
        b = 0;
    } else if (h1 >= 1 && h1 < 2) {
        r = x;
        g = c;
        b = 0;
    } else if (h1 >= 2 && h1 < 3) {
        r = 0;
        g = c;
        b = x;
    } else if (h1 >= 3 && h1 < 4) {
        r = 0;
        g = x;
        b = c;
    } else if (h1 >= 4 && h1 < 5) {
        r = x;
        g = 0;
        b = c;
    } else if (h1 >= 5 && h1 < 6) {
        r = c;
        g = 0;
        b = x;
    }

    t._set(Math.round((r + m) * 255), Math.round((g + m) * 255), Math.round((b + m) * 255), a);
    return t;
};

/**
 * Builds a `Color` from a 3 or 4 element array, mapping each element in sequence to the rgb(a) values of the color.
 * @param {Array} a - A 3 or 4 element array containing numerical values from 0 to 255 for r, g, b, and optionally a respectively.
 * @param {Color} [obj] - Provide a Color object to reuse
 * @returns {Color} A Color object. If obj is passed, it will be the return value.
 * @example
 *   var myColor = colorFromArray([237,237,237,0.5]); // grey, 50% alpha
 */
export const colorFromArray = function colorFromArray(a, obj) {
    const t = obj || new Color();
    t._set(Number(a[0]), Number(a[1]), Number(a[2]), Number(a[3]));
    if (isNaN(t.a)) {
        t.a = 1;
    }
    return t;
};

/**
 * Parses `str` for a color value. Accepts hex, rgb, and rgba style color values.
 * Acceptable input values for str may include arrays of any form
 * accepted by colorFromArray, hex strings such as "#aaaaaa", or
 * rgb or rgba strings such as "rgb(133, 200, 16)" or "rgba(10, 10, 10, 50)"
 * @param {String} str - A string CSS color value
 * @param {Color} [obj] - Provide a Color object to reuse
 * @returns {Color} A Color object. If obj is passed, it will be the return value.
 */
export const colorFromString = function colorFromString(str, obj) {
    const a = named[str.toLowerCase()];
    return (a && colorFromHex(a, obj)) || colorFromRgb(str, obj) || colorFromHsl(str, obj) || colorFromHex(str, obj);
};

/**
 * Builds a `Color` from RGB or ARGB integer value.
 * @param {number|string} color - A color value in a number format
 * @param {Color} [obj] - Provide a Color object to reuse
 * @returns {Color} A Color object. If obj is passed, it will be the return value.
 * @example
 *   var myColor = colorFromInt("16777215"); // white, no alpha
 */
export const colorFromInt = function colorFromInt(color, obj) {
    const t = obj || new Color();
    let c = color;
    if (typeof c === 'string') {
        c = parseInt(c, 10);
    }
    t._set((c >> 16) & 0xff, (c >> 8) & 0xff, c & 0xff, ((c >>> 24) & 0xff) / 255);
    return t;
};

/**
 * Builds a `Color` from COLORREF (BGR)  integer value.
 * @param {number|string} c - A color value in a number format
 * @param {Color} [obj] - Provide a Color object to reuse
 * @returns {Color} A Color object. If obj is passed, it will be the return value.
 */
export const colorFromCOLORREF = function colorFromCOLORREF(c, obj) {
    const t = obj || new Color();
    let color = c;
    if (typeof color === 'string') {
        color = parseInt(color, 10);
    }
    t._set(color & 0xff, (color >> 8) & 0xff, (color >> 16) & 0xff, 1);
    return t;
};

/**
 * Darkens the specified color by a percentage where 0 indicates no changes is made and 100 indicates the color will be #000000.
 * @param {*} color - The color value. See {@link Color#setColor}.
 * @param {Number} percentage - A number from 0 to 100 indicating the amount to darken the specified color by
 * @param {Color} [obj] - Provide a Color object to reuse
 * @returns {Color} A Color object. If obj is passed, it will be the return value.
 * @example
 *   var myColor = darken('#8844CC', 50); // #441d6b
 */
export const darken = function darken(color, percentage, obj) {
    const t = obj || new Color();
    t.setColor(color);
    const hsl = t.toHsl();
    hsl[2] -= (hsl[2] === 1 ? 1 : hsl[2]) * (percentage / 100);
    return colorFromHsl(hsl, t);
};

/**
 * Lightens the specified color by a percentage where 0 indicates no changes is made and 100 indicates the color will be #FFFFFF.
 * @param {*} color - The color value. See {@link Color#setColor}.
 * @param {Number} percentage - A number from 0 to 100 indicating the amount to lighten the specified color by
 * @param {Color} [obj] - Provide a Color object to reuse
 * @returns {Color} A Color object. If obj is passed, it will be the return value.
 * @example
 *   var myColor = lighten('#8844CC', 50); // #C3A1E6
 */
export const lighten = function lighten(color, percentage, obj) {
    const t = obj || new Color();
    t.setColor(color);
    const hsl = t.toHsl();
    hsl[2] += (hsl[2] === 1 ? 1 : 1 - hsl[2]) * (percentage / 100);
    hsl[2] = hsl[2] > 1 ? 1 : hsl[2];
    return colorFromHsl(hsl, t);
};

/**
 * Returns the closest matching color from the specified list
 * @param {*} color - The color value. See {@link Color#setColor}.
 * @param {Array} list - A list of colors to compare against the specified color value
 * @param {Color} [obj] - Provide a Color object to reuse
 * @returns {Color} A Color object. If obj is passed, it will be the return value.
 * @example
 *   var colorList = ["#ff8080","#80ff80","#8080ff","#ffffff","#ff0000","#00ff00","#0000ff","#808080","#800000","#008000","#000080","#000000"];
 *   console.log(closestColorFromList('#8844CC', colorList).toHex()); // #0000ff
 */
export const closestColorFromList = function closestColorFromList(color, list, obj) {
    const colorObj = obj || new Color();
    const colorHsl = colorObj.setColor(color).toHsl();
    let closest = null;
    let distance = null;

    for (let i = 0, size = list.length; i < size && distance !== 0; i++) {
        const hsl = colorObj.setColor(list[i]).toHsl();
        distance = (colorHsl[0] - hsl[0] ** 2 + (colorHsl[1] - hsl[1] ** 2) + (colorHsl[2] - hsl[2] ** 2)) ** 0.5;
        if (closest === null || distance <= closest.distance)
            closest = {
                color: list[i],
                distance,
            };
    }

    return colorObj.setColor(closest.color);
};

/**
 * TODO - Investigate what this function does and document
 */
export const getColorWheel = function getColorWheel() {
    let options = clone(ColorWheelPreset.DEFAULT);
    // eslint-disable-next-line prefer-rest-params
    for (let i = 0, iLen = arguments.length; i < iLen; i++) options = Object.assign(options, arguments[i]);

    const colorObj = new Color();
    const colors = [];
    const num = options.numMod
        ? options.numMod - (options.hueIncLast ? options.numMod / options.num : 0)
        : options.num - +!!options.hueIncLast;
    const hueDelta = (options.hue + options.hueSpace - options.hue) / num;
    const a = Math.PI / 180;

    for (let i = 0; i < options.num; i++) {
        const degree = i / num * 360;
        const hue = mod(options.hue + i * options.hueDir * hueDelta, 360) / 360;
        const lum =
            (Math.sin(mod((degree + options.lumRotate) * options.lumRate, 360) * a) + 1) / 2 * options.lumSpace +
            (options.lum - options.lumSpace / 2);
        const sat =
            (Math.cos(mod((degree + options.satRotate) * options.satRate, 360) * a) + 1) / 2 * options.satSpace +
            (options.sat - options.satSpace);

        colors[colors.length] = colorFromHsl([hue, sat, lum], colorObj).toCss();
    }

    // console.log.apply(console, [colors.map((c, i) => "\n" + '%c [' + i + '] ' + colorObj.setColor(c).toHex() + ' '.repeat(50), colorObj).join('')].concat(colors.map(c => 'background-color: ' + c + '; color: ' + this.fontColorFromBackground(c).toHex() + ';', this))); // DEBUG
    return colors;
};

export const ColorWheelPreset = {
    DEFAULT: {
        hue: 0, // degree, initial hue value
        hueDir: 1, // direction, next hue value direction
        hueIncLast: 0, // boolean, include last color in available hue space
        hueSpace: 360, // degree, available hue space
        sat: 1, // ratio, initial saturation value
        satRate: 1, // ratio, saturation circumference rate
        satRotate: 0, // degree, rotate saturation variation to available space
        satSpace: 0, // ratio, available saturation space
        lum: 0.5, // ratio, initial luminosity value
        lumRate: 1, // ratio, luminosity circumference rate
        lumRotate: 0, // degree, rotate luminosity variation to available space
        lumSpace: 0, // ratio, available luminosity space
        num: 6, // number, number of colors
        numMod: 0, // number, when to repeat colors
    },

    GREYSCALE: { hueDir: 0, hueIncLast: 1, lumRate: 0.5, lumRotate: 180, lumSpace: 1, sat: 0 },
    MONOCHROME: { hueDir: 0, hueIncLast: 1, lumRate: 0.5, lumRotate: 180, lumSpace: 1 },

    ALL: { hue: 0, hueSpace: 360, lum: 0.65, satRate: 0.5, satRotate: 45, satSpace: 0.3 },
    COLD: {
        hue: 300,
        hueSpace: -240,
        lum: 0.65,
        lumRate: 2,
        lumRotate: 270,
        lumSpace: 0.2,
        satRate: 0.5,
        satRotate: 360,
        satSpace: 0.3,
    },
    WARM: { hue: -60, hueSpace: 180, lum: 0.5, lumRate: -0.5, lumRotate: 270, lumSpace: 0.4, satSpace: 0.2 },

    DOW: { num: 7, hue: 60, hueSpace: 270, lum: 0.7, lumRate: 2, lumRotate: 30, lumSpace: 0.15 },
    HOURS: { num: 24, hue: 300, lum: 0.55, lumSpace: 0.5, satSpace: 0.5 },
    MONTHS: { num: 12, hue: 210, hueDir: -1, lum: 0.75, lumRate: 0.5, lumRotate: 360, lumSpace: 0.25, satSpace: 0.1 },
};

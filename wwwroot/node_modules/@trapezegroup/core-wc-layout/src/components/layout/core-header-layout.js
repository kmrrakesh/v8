/**  import litElement base class and html helper function */
import { LitElement, html, css } from 'lit-element';
import { dotdotdotMenu } from '@trapezegroup/core-js-icons/src/lib/dotdotdot-menu.js';
import { unsafeHTML } from 'lit-html/directives/unsafe-html.js';

/** This component creates the header for the core layout */
export class CoreHeaderLayout extends LitElement {
    /** @inheritdoc */
    static get styles() {
        return [
            css`
                :host {
                    display: block;
                    height: 100%;
                    box-sizing: border-box;
                }
                .header {
                    display: flex;
                    height: var(--layout-header-height);
                    line-height: var(--layout-header-height);
                    color: var(--prim-txt);
                }
                .left-div {
                    display: flex;
                    justify-content: flex-start;
                    align-items: center;
                }
                .right-div {
                    display: flex;
                    justify-content: flex-end;
                    flex: 2 0 0;
                    margin-right: 2.5rem;
                }
                .menu {
                    display: none;
                    margin: 0 2.3rem;
                    width: 2.6rem;
                    height: 2.6rem;
                }
                .title-div {
                    height: 100%;
                }
                .title-div ::slotted(*) {
                    height: 100%;
                    font-size: 1.5rem;
                    font-weight: bold;
                }
                .menu-template {
                    display: none;
                }
                :host(.has-menu) {
                    display: block;
                }

                :host(.has-menu) .menu {
                    display: block;
                }
            `,
        ];
    }

    /** We can initialize the properties here in the constructor */
    constructor() {
        // Must call superconstructor first.
        super();
    }

    /** @inheritdoc */
    render() {
        return html`
        <div class="header">
            ${this.leftTemplate}
            ${this.rightTemplate}
        </div>
    `;
    }

    /**
     * @returns {import('lit-element').TemplateResult} the template for the menu and the title for the core layout
     */
    get leftTemplate() {
        return html`
        <div class="left-div">
            ${this.menuTemplate}
            <div class="title-div">
                <slot name="title"></slot>
            </div>
        </div>
        `;
    }
    /**
     * @returns {import('lit-element').TemplateResult} the menu template for the core layout
     */
    get menuTemplate() {
        return html`
        <div class="menu">${unsafeHTML(dotdotdotMenu)}
            <slot class="menu-template" name="menu"></slot>
        </div>`;
    }

    /**
     * @returns {import('lit-element').TemplateResult} the filter template for the core layout
     */
    get rightTemplate() {
        return html`
        <div class="right-div">
            <slot name="filter"></slot>
        </div>
        `;
    }
    /** @inheritdoc */
    connectedCallback() {
        const slots = this.querySelectorAll('slot');
        const menuSlot = slots[0];
        menuSlot.addEventListener('slotchange', e => {
            if (menuSlot && menuSlot.assignedNodes()) {
                this.classList.add('has-menu');
            }
        });

        super.connectedCallback();
    }
}
customElements.define('core-header-layout', CoreHeaderLayout);

// @ts-check
import { openDataInBrowser } from '@trapezegroup/core-js-browser/index.js';
/**
 * Class that can generate Excel markup for Rowset Obects.
 * Related links
 * Data URI scheme:
 * http://en.wikipedia.org/wiki/Data_URI_scheme#JavaScript
 * Create Excel XML:
 * http://www.techrepublic.com/article/convert-an-xml-file-into-an-excel-spreadsheet-with-this-technique/6163451
 * Server side Excel output example:
 * http://www.ibm.com/developerworks/opensource/library/os-phpexcel/
 */
export class Excel {
    /** Creates an Excel object that can be used to open Rowset data in Excel */
    constructor() {
        this.documentProperties = { Author: '', Company: '', Version: 10.4219 };
        this.officeDocumentSettings = { DownloadComponents: null, LocationOfComponents: null };
        /** @type {import('./excelStyle.js').ExcelStyle[]} */
        this.styles = [];
        /** @type {import('./excelWorksheet').ExcelWorkSheet[]} */
        this.worksheets = [];
    }

    /** @returns {string} Serializes the Rowset in XML output for Excel */
    toXML() {
        let excelXML =
            '<?xml version="1.0" encoding="UTF-8"?><?mso-application progid="Excel.Sheet"?><Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet" xmlns:html="http://www.w3.org/TR/REC-html40" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet" xmlns:x="urn:schemas-microsoft-com:office:excel">';

        excelXML += '<DocumentProperties xmlns="urn:schemas-microsoft-com:office:office">';
        // eslint-disable-next-line no-restricted-syntax
        for (const prop in this.documentProperties) {
            if (this.documentProperties[prop] == null)
                excelXML += `<${prop} xmlns="urn:schemas-microsoft-com:office:office"/>`;
            else
                excelXML += `<${prop} xmlns="urn:schemas-microsoft-com:office:office">${
                    this.documentProperties[prop]
                }</${prop}>`;
        }
        excelXML += '</DocumentProperties>';

        excelXML += '<OfficeDocumentSettings xmlns="urn:schemas-microsoft-com:office:office">';
        // eslint-disable-next-line no-restricted-syntax
        for (const prop in this.officeDocumentSettings) {
            if (this.officeDocumentSettings[prop] == null)
                excelXML += `<${prop} xmlns="urn:schemas-microsoft-com:office:office"/>`;
            else
                excelXML += `<${prop} xmlns="urn:schemas-microsoft-com:office:office">${
                    this.documentProperties[prop]
                }</${prop}>`;
        }
        excelXML += '</OfficeDocumentSettings>';

        excelXML += '<Styles>';
        for (let i = 0; i < this.styles.length; i++) {
            const style = this.styles[i];
            excelXML += `<Style ss:ID="${style.id}" ss:Name="${style.id}">`;
            // eslint-disable-next-line no-restricted-syntax
            for (const prop in style.properties) {
                if (Object.prototype.hasOwnProperty.call(style.properties, prop)) {
                    excelXML += `<${prop}`;
                    // eslint-disable-next-line no-restricted-syntax
                    for (const prop2 in style.properties[prop]) {
                        if (Object.prototype.hasOwnProperty.call(style.properties[prop], prop2)) {
                            excelXML += ` ss:${prop2}="${style.properties[prop][prop2]}"`;
                        }
                    }
                    excelXML += '/>';
                }
            }
            excelXML += '</Style>';
        }
        excelXML += '</Styles>';

        for (let i = 0; i < this.worksheets.length; i++) {
            const worksheet = this.worksheets[i];
            excelXML += `<Worksheet ss:Name="${worksheet.name || `Sheet ${i}`}">`;
            for (let ti = 0; ti < worksheet.tables.length; ti++) {
                const table = worksheet.tables[ti];
                excelXML += `<Table ss:ExpandedColumnCount="${table.getMaxColCount()}" ss:ExpandedRowCount="${
                    table.rows.length
                }">`;
                for (let ri = 0; ri < table.rows.length; ri++) {
                    const row = table.rows[ri];
                    excelXML += '<Row>';
                    for (let ci = 0; ci < row.cells.length; ci++) {
                        const cell = row.cells[ci];
                        excelXML += `<Cell ${(cell.styleId && `ss:StyleID="${cell.styleId}"`) || ''}><Data ss:Type="${
                            cell.type
                        }">${cell.value}</Data></Cell>`;
                    }
                    excelXML += '</Row>';
                }
                excelXML += '</Table>';
            }
            excelXML +=
                '<WorksheetOptions xmlns="urn:schemas-microsoft-com:office:excel"><Print xmlns="urn:schemas-microsoft-com:office:excel"><ValidPrinterInfo xmlns="urn:schemas-microsoft-com:office:excel" /><HorizontalResolution xmlns="urn:schemas-microsoft-com:office:excel">1200</HorizontalResolution><VerticalResolution xmlns="urn:schemas-microsoft-com:office:excel">1200</VerticalResolution></Print><ProtectObjects xmlns="urn:schemas-microsoft-com:office:excel">False</ProtectObjects><ProtectScenarios xmlns="urn:schemas-microsoft-com:office:excel">False</ProtectScenarios></WorksheetOptions>';
            excelXML += '</Worksheet>';
        }

        excelXML += '</Workbook>';
        return excelXML;
    }

    /**
     * Converts the Rowset to Excel output and tries to open it in a Operating System applicaiton (Excel)
     * http://www.techrepublic.com/article/convert-an-xml-file-into-an-excel-spreadsheet-with-this-technique/6163451
     */
    run() {
        if (!window.navigator.msSaveBlob && 'ActiveXObject' in window) {
            try {
                // Copy to-from clipborad example:
                // excelData = '1\t2\t3\n4\t4\t5\t5';
                // window.clipboardData.setData("Text", excelData);
                // let objExcel = new ActiveXObject ("Excel.Application");
                // objExcel.visible = true;
                // let objWorkbook = objExcel.Workbooks.Add;
                // let objWorkbook = objExcel.Workbooks.Open('data:application/vnd.ms-excel,' + encodeURI(excelData));
                // let objWorksheet = objWorkbook.Worksheets(1);
                // objWorksheet.Paste;

                // Build worksheet manually example:
                // let excel = new ActiveXObject ("Excel.Application");
                // excel.visible = true;
                // let workbook = excel.Workbooks.Add;
                // let props = objWorkbook.CustomDocumentProperties
                // props.Add("Author", 0, 4, "Trapeze");
                // let worksheet = objWorkbook.Worksheets(1);
                // worksheet.Name = worksheetName || "Trapeze Export";

                // Write XML to file and load example
                // eslint-disable-next-line no-undef
                const fso = new ActiveXObject('Scripting.FileSystemObject');
                const TemporaryFolder = 2;
                const folderName = fso.GetSpecialFolder(TemporaryFolder).Path;
                const fileName = `${folderName}\\${fso.GetTempName()}`;
                const file = fso.CreateTextFile(fileName, true);

                try {
                    file.Write(this.toXML());
                } catch (e) {
                    throw e;
                } finally {
                    file.Close();
                }

                // eslint-disable-next-line no-undef
                const excel = new ActiveXObject('Excel.Application');
                excel.visible = true;
                excel.Workbooks.Open(fso.GetFile(fileName).Path);
            } catch (e) {
                if (e.message.indexOf('create object') > -1)
                    // TODO improve message with links to MSDN if possible
                    // eslint-disable-next-line no-alert
                    alert(
                        'In your internet security options, you must add this web site to your Trusted Sites and allow ActiveX controls',
                    );
                else throw e;
            }
        } else {
            // Other Browsers
            // Although the file extension is "xls", the mediaType is left as
            // "application/vnd.ms-excel" rather than "application/xml" for unsupported browsers
            openDataInBrowser({ data: this.toXML(), fileName: 'download.xls', mediaType: 'application/vnd.ms-excel' });
        }
    }
}

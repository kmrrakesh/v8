// @ts-check
/* global jQuery */
/**  import litElement base class and html helper function */
import { dispatchCustomEvent } from '@trapezegroup/core-js-extensions/src/lib/event.js';
import { LitElement, html, css, svg } from 'lit-element';
import '@trapezegroup/core-webui-styles/dist/theme-default/components/modal.js';
import '@trapezegroup/core-webui-styles/dist/theme-default/components/dimmer.js';
import '@trapezegroup/core-webui-styles/dist/theme-default/components/transition.js';
import './core-modal-content.js';
import './core-modal-footer.js';

/** This is an example of a component which extends the litElement */
export class CoreModal extends LitElement {
    /** @inheritdoc */
    static get styles() {
        return [
            css`
                :host {
                    display: block;
                    background-color: var(--prim-dialog-bg);
                    min-width: calc(100% - 4rem);
                    box-sizing: border-box;
                    min-height: 250px;
                    display: flex;
                    position: relative;
                    margin: auto;
                }

                @media (min-width: 600px) {
                    :host {
                        min-width: 600px;
                    }
                }

                @media (min-width: 800px) {
                    :host {
                        min-width: 740px;
                    }
                }

                :host {
                    display: flex;
                    flex-direction: column;
                    justify-content: center;
                }

                :host(.has-content) {
                    display: block;
                }

                :host(.has-content) core-modal-content {
                    display: block;
                }

                .header {
                    font-size: 1.8rem;
                    text-align: center;
                    opacity: 1;
                    color: var(--prim-txt);
                    align-items: center;
                    flex-wrap: wrap;
                    margin-top: 3rem;
                    margin-bottom: 1.5rem;
                }

                :host(.has-content) .header {
                    background-color: var(--nav-bg);
                    color: var(--prim-brd);
                    height: 6rem;
                    margin: 0;
                    display: flex;
                    flex-direction: column;
                    justify-content: center;
                }

                .header-content-div {
                    flex: 0 1 auto;
                }
                .close-icon {
                    width: 1rem;
                    height: 1.2rem;
                    margin-right: 1rem;
                    margin-top: 1rem;
                    position: absolute;
                    top: 0;
                    right: 0;
                    cursor: pointer;
                    --icon-color: var(--prim-txt);
                }

                :host(.has-content) .close-icon {
                    --icon-color: var(--prim-brd);
                    top: 1.5rem;
                    right: 0.5rem;
                }

                core-modal-content {
                    margin: 2rem;
                }

                core-modal-footer {
                    margin-top: 1rem;
                    margin-bottom: 3rem;
                }
            `,
        ];
    }

    /** @inheritdoc */
    static get properties() {
        return {
            isDimClosable: { type: Boolean, attribute: 'dim-closable' },
        };
    }
    /** Initializes the UI */
    firstUpdated() {
        const close = this.isDimClosable;
        jQuery(this).modal({
            // eslint-disable-next-line no-undef
            context: jQuery(this.parentNode instanceof HTMLElement && this.parentNode),
            closable: close,
            onVisible: handleEvent.bind(this, 'modalVisible'),
            onShow: handleEvent.bind(this, 'modalShow'),
            onHide: handleEvent.bind(this, 'modalHide'),
        });
        this.addEventListeners();
    }

    /** Adding event listeners for button actions */
    addEventListeners() {
        this.addEventListener('buttonAction', event => {
            if (!event.defaultPrevented) {
                this.hide();
            }
        });
        this.addEventListener('okAction', event => {
            if (!event.defaultPrevented) {
                this.hide();
            }
        });
        this.addEventListener('cancelAction', event => {
            if (!event.defaultPrevented) {
                this.hide();
            }
        });
        this.addEventListener('noAction', event => {
            if (!event.defaultPrevented) {
                this.hide();
            }
        });
        this.addEventListener('yesAction', event => {
            if (!event.defaultPrevented) {
                this.hide();
            }
        });
        this.addEventListener('applyAction', event => {
            if (!event.defaultPrevented) {
                this.hide();
            }
        });
    }

    /** @inheritdoc */
    connectedCallback() {
        this.shadowRoot.addEventListener('slotchange', e => {
            const slot = e.path[0];
            if (slot && slot.getAttribute('name') === 'content') {
                this.classList.add('has-content');
            }
        });

        super.connectedCallback();
    }

    /** We can initialize the properties here in the constructor */
    constructor() {
        // Must call superconstructor first.
        super();
        this.isDimClosable = false;
    }

    /** @inheritdoc */
    render() {
        return html`
            ${this.headerTemplate}
            ${this.contentTemplate}
            ${this.footerTemplate}
            ${this.closeButtonTemplate}
        `;
    }

    /**
     * @returns {import('lit-element').TemplateResult}
     *  returns the header template for the modal
     */
    get closeButtonTemplate() {
        return svg`
            ${
                !this.isDimClosable
                    ? svg`
                        <svg
                            class="close-icon" @click=${this.closeModalWindow}
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 503.26 500">
                            <path style="fill: var(--icon-color);" d="M301.6,250,478.39,61.43A36.46,36.46,0,0,0,425.2,11.55L251.63,196.71,78.05,11.55A36.46,36.46,0,1,0,24.87,61.43L201.66,250,24.87,438.61a36.45,36.45,0,1,0,53.18,49.87L251.63,303.32,425.2,488.48a36.46,36.46,0,1,0,53.19-49.87Z"/>
                        </svg>`
                    : null
            }`;
    }

    /**
     * @returns {import('lit-element').TemplateResult}
     *  returns the header template for the modal
     */
    get headerTemplate() {
        return html`
        <div class="header">
            <div class="header-content-div">
                <slot name="title"></slot>
            </div>
        </div>`;
    }

    /**
     * @returns {import('lit-element').TemplateResult}
     *  returns the footer template for the modal
     */
    get footerTemplate() {
        return html`<core-modal-footer>
            <slot name="positiveButton" slot="positiveButton"></slot>
            <slot name="intermediateButton" slot="intermediateButton"></slot>
            <slot name="negativeButton" slot="negativeButton"></slot>
        </core-modal-footer>`;
    }

    /** @returns {import('lit-element').TemplateResult}
     *  returns the content template for the modal
     */
    get contentTemplate() {
        return html`
        <core-modal-content>
            <slot name="content" slot="content"></slot>
        </core-modal-content>`;
    }

    // Interaction
    /** Display the modal */
    show() {
        if (!this.isVisible()) {
            jQuery(this).modal('show');
        }
    }

    /** Hides the modal */
    hide() {
        jQuery(this).modal('hide');
    }

    /** @returns {boolean} whether the modal is currently open */
    isVisible() {
        return jQuery(this).modal('is active');
    }

    /** Closes the modal window */
    closeModalWindow() {
        if (this.isVisible()) {
            jQuery(this).modal('hide');
        }
        const modalCloseEvent = new CustomEvent('modalClose', {
            detail: { message: 'Closed' },
            bubbles: true,
            composed: true,
            cancelable: true,
        });
        this.dispatchEvent(modalCloseEvent);
    }
}
customElements.define('core-modal', CoreModal);

/**
 * Generic code to fire event
 * @param {string} eventName  name of the event fired
 */
function handleEvent(eventName) {
    if (this instanceof CoreModal) {
        dispatchCustomEvent(this, eventName, {});
    }
}

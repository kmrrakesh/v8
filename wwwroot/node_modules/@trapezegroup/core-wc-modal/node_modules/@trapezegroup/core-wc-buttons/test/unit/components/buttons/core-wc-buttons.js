/* global describe, beforeAll, afterAll, it, expect */
/* Jasmine will be loaded by the test framework. No need to import it. */
import '../../../../src/components/core-yes-button.js';
import '../../../../src/components/core-no-button.js';
import '../../../../src/components/core-ok-button.js';
import '../../../../src/components/core-cancel-button.js';
import '../../../../src/components/core-apply-button.js';
import '../../../../src/components/core-button.js';

const yesButton = document.createElement('core-yes-button');
const noButton = document.createElement('core-no-button');
const okButton = document.createElement('core-ok-button');
const cancelButton = document.createElement('core-cancel-button');
const applyButton = document.createElement('core-apply-button');
const customButton = document.createElement('core-button');
describe('Testing Buttons', () => {
    beforeAll(() => {
        document.body.appendChild(yesButton);
        document.body.appendChild(noButton);
        document.body.appendChild(okButton);
        document.body.appendChild(cancelButton);
        document.body.appendChild(applyButton);
        document.body.appendChild(customButton);
        customButton.setAttribute('button-title', 'My Custom Button');
        customButton.setAttribute('button-type', 'negative');
    });

    afterAll(() => {
        document.body.removeChild(yesButton);
        document.body.removeChild(noButton);
        document.body.removeChild(okButton);
        document.body.removeChild(cancelButton);
        document.body.removeChild(applyButton);
    });

    it('should render the appropriate button title', () => {
        expect(yesButton.shadowRoot.textContent).toContain('YES');
        expect(noButton.shadowRoot.textContent).toContain('NO');
        expect(okButton.shadowRoot.textContent).toContain('OK');
        expect(cancelButton.shadowRoot.textContent).toContain('CANCEL');
        expect(applyButton.shadowRoot.textContent).toContain('APPLY');
    });

    it('should render the same button title as set in the attribute', () => {
        expect(customButton.shadowRoot.textContent).toContain('My Custom Button');
    });

    it('should set the same button type as set in the attribute', () => {
        expect(customButton.getAttribute('button-type')).toEqual('negative');
    });

    it('should trigger button click', () => {
        const spyEvent = spyOn(okButton, 'click');
        okButton.click();
        expect(spyEvent).toHaveBeenCalled();
    });
    it('should trigger button click', () => {
        const spyEvent = spyOn(cancelButton, 'click');
        cancelButton.click();
        expect(spyEvent).toHaveBeenCalled();
    });
    it('should trigger button click', () => {
        const spyEvent = spyOn(yesButton, 'click');
        yesButton.click();
        expect(spyEvent).toHaveBeenCalled();
    });
    it('should trigger button click', () => {
        const spyEvent = spyOn(noButton, 'click');
        noButton.click();
        expect(spyEvent).toHaveBeenCalled();
    });
    it('should trigger button click', () => {
        const spyEvent = spyOn(customButton, 'click');
        customButton.click();
        expect(spyEvent).toHaveBeenCalled();
    });
    it('should trigger button click', () => {
        const spyEvent = spyOn(applyButton, 'click');
        applyButton.click();
        expect(spyEvent).toHaveBeenCalled();
    });
    it('should NOT trigger button click with disabled attribute', () => {
        customButton.setAttribute('disabled', '');
        const clickHandler = function(e) {
            expect(false).toEqual(true);
        }
        document.body.addEventListener('click', clickHandler);
        customButton.click();
        customButton.removeAttribute('disabled');
        document.body.removeEventListener('click', clickHandler);
    });
    it('should NOT trigger button click with disabled property', () => {
        customButton.disabled = true;
        const clickHandler = function(e) {
            expect(false).toEqual(true);
        }
        document.body.addEventListener('click', clickHandler);
        customButton.click();
        delete customButton.disabled;
        document.body.removeEventListener('click', clickHandler);
    });
});

/**  import litElement base class and html helper function */
import { LitElement, html, css } from 'lit-element';
import { translate as t } from 'lit-i18n/src/lit-i18n.js';
import { TcfDateTime } from '@trapezegroup/core-js-tcftypes/src/lib/types.js';
import { i18nInit } from '@trapezegroup/core-js-app/build/es6-bundled/index.js';

i18nInit({ importMeta: import.meta, namespace: 'core-notification' });

const CORENOTIFICATIONCARD = 'core-notification-card';

/** @type {Map<string, string>} map of notifiction types and web components */
const notificationTypesRegistry = new Map();

/**
 *
 * @param {string} type type of the notification card.This will be the type value send from the server.
 * @param {string} webComponent - webcomponent to be rendered inside the notification list/toast
 */
export function registerType(type, webComponent) {
    notificationTypesRegistry.set(type, webComponent);
}

/**
 * @param {Notifiction} notification - notification value to populate the card template
 * @returns {HTMLElement} template for the notification card
 */
export function notificationCardTemplate(notification) {
    const notificationCardString = notificationTypesRegistry.get(notification.name) || CORENOTIFICATIONCARD;
    const notificationCard = document.createElement(notificationCardString);
    if (notificationCard instanceof CoreNotificationCard) {
        notificationCard.classList.add('item');
        notificationCard.notification = notification;
        return notificationCard;
    }
    throw new Error(`${notificationCardString} must extend CoreNotificationCard`);
}

/** This is an example of a component which extends the litElement */
export class CoreNotificationCard extends LitElement {
    /** @inheritdoc */
    static get styles() {
        return [
            css`
                :host {
                    display: block !important;
                    height: auto;
                    min-height: 7.4rem;
                    background-color: var(--prim-bg);
                }
                .container {
                    padding: 1.7rem;
                    background-color: var(--prim-bg);
                    color: var(--prim-txt);
                }
                .header {
                    display: grid;
                    grid-template-columns: repeat(2, 1fr);
                }
                .header .title {
                    text-align: left;
                    font-size: 1.4rem;
                    font-weight: bold;
                    text-transform: capitalize;
                }
                .header .subtitle {
                    text-align: right;
                    font-weight: normal;
                    font-size: 1.3rem;
                }
                .content {
                    font-size: 1.4rem;
                    margin-top: 0.5rem;
                    display: block;
                    white-space: normal;
                }
            `,
        ];
    }

    /** @inheritdoc */
    static get properties() {
        return {
            notification: { type: Object },
        };
    }

    /** @inheritdoc */
    connectedCallback() {
        this.tcfDateTime.initLocale(this);

        super.connectedCallback();
    }

    /** We can initialize the properties here in the constructor */
    constructor() {
        // Must call superconstructor first.
        super();

        // Initialize properties
        /** @type {import('./core-notification.js').Notifiction} */
        this.notification = {};
        this.tcfDateTime = new TcfDateTime();
    }

    /** @inheritdoc */
    render() {
        if (this.notification) {
            return html`
                ${this.contentTemplate}
                ${this.accentCardTemplate}
                ${this.dotsTemplate}
            `;
        }
        return html``;
    }

    /**
     * @returns {import('lit-element').TemplateResult}
     * returns the header template for the dropdown
     */
    get contentTemplate() {
        this.classList.add('notify-div');
        const localizeKey = this.notification.name.replace(/\./g, '');
        this.addEventListener('click', this.navigate);
        return html`
        <div class="container">
            <div class="header">
                <div class="title">${t(`ym-notifications:${localizeKey}-title`, { notification: this.notification })}</div>
                <div class="subtitle">${this.formatDateTime(this.notification.time)}</div>                
            </div>
            <div class="content">
                ${t(`ym-notifications:${localizeKey}-content`, { notification: this.notification })}
            </div>
        </div>      
        `;
    }

    /**
     * @param {string} time - time value to be formatted
     * @returns {string} returns formatted date time value
     */
    formatDateTime(time) {
        return this.tcfDateTime.setValue(new Date(time)).toString('HH:mm');
    }
    /** Navigates to the details */
    navigate() {
        const event = new CustomEvent('navigate', {
            bubbles: true,
            composed: true,
            detail: { message: 'navigation' },
        });
        this.dispatchEvent(event);
    }

    /** returns null since it is specific to the product
     * @returns {null} value
     */
    get accentCardTemplate() {
        return null;
    }

    /** returns null since it is specific to the product
     * @returns {null} value
     */
    get dotsTemplate() {
        return null;
    }
}

customElements.define('core-notification-card', CoreNotificationCard);
registerType('core', 'core-notification-card');

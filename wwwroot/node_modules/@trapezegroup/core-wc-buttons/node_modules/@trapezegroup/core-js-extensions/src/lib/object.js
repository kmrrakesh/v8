/**
 * Compares 2 Objects to test for equality. This is a deep compare. Values of type function are compared by String. They don't have to be the same instance of the same function. This should be taken into account for functions that are run through the bind() as the toString will return the bind function and the two function will equate to the same.
 * @param {Object} a - First Object in comparison.
 * @param {Object} b - Seconod Object in comparison.
 * @returns {boolean} TRUE if ALL properties (including nested properties) are equivalent. Otherwise FALSE.
 * @memberof Object
 */
export function equals(a, b) {
    if (a === b) return true;

    if ((!a && b) || (!b && a) || typeof a !== typeof b) return false;

    // quick test number of properties
    const ca = Object.keys(a);
    const cb = Object.keys(b);
    if (ca.length !== cb.length) return false;

    // quick test if same properties are present in both
    for (let i = 0, len = ca.length; i < len; i++) if (!Object.prototype.hasOwnProperty.call(b, ca[i])) return false;

    // check the values
    let va;
    let vb;
    let ta;
    let tb;
    for (let p, i = 0, len = ca.length; i < len; i++) {
        p = ca[i];
        va = a[p];
        vb = b[p];
        ta = typeof va;
        tb = typeof vb;
        if (ta !== tb) return false;
        if (ta === 'object' && !equals(va, vb)) return false;
        if (ta === 'function' && va.toString() !== vb.toString()) return false;
        if (ta !== 'object' && ta !== 'function' && va !== vb) return false;
    }
    return true;
}

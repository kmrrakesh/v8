// @ts-check
/**
 * Removes "px" from the string representation of the pixel value
 * @param {String} pixelValue - String to remove "px" from.
 */
export const getPixels = function getPixels(pixelValue) {
    if (pixelValue.split) {
        if (pixelValue === '') return 0;

        return Number(pixelValue.split('px')[0]);
    }

    return pixelValue;
};

/** Conversion  */
const _primitiveToPrimitive = {
    string: {
        /** Converts string to number */
        number(value) {
            return parseFloat(value);
        },
        /** Converts string to boolean */
        boolean(value) {
            return value.toBoolean();
        },
        /** Converts string to string */
        string(value) {
            return value;
        },
        /** Converts string to function */
        function(value) {
            return value.toFunction();
        },
        /** Converts string to object */
        object(value) {
            return JSON.parse(value);
        },
    },
    number: {
        /** Converts number to number */
        number(value) {
            return value;
        },
        /** Converts number to boolean */
        boolean(value) {
            return !!value;
        },
        /** Converts number to string */
        string(value) {
            return `${value}`;
        },
        /** Converts number to function */
        function(value) {
            throw new Error('Unable to cast from number to function');
        },
        /** Converts number to object */
        object(value) {
            throw new Error('Unable to cast from number to object');
        },
    },
    boolean: {
        /** Converts boolean to number */
        number(value) {
            return value ? 1 : 0;
        },
        /** Converts boolean to boolean */
        boolean(value) {
            return value;
        },
        /** Converts boolean to string */
        string(value) {
            return `${value}`;
        },
        /** Converts boolean to function */
        function(value) {
            throw new Error('Unable to cast from boolean to function');
        },
        /** Converts boolean to object */
        object(value) {
            throw new Error('Unable to cast from boolean to object');
        },
    },
    function: {
        /** Converts function to number */
        number(value) {
            throw new Error('Unable to cast from function to number');
        },
        /** Converts function to boolean */
        boolean(value) {
            throw new Error('Unable to cast from function to boolean');
        },
        /** Converts function to string */
        string(value) {
            return value.toString();
        },
        /** Converts function to function */
        function(value) {
            return value;
        },
        /** Converts function to object */
        object(value) {
            throw new Error('Unable to cast from function to object');
        },
    },
    object: {
        /** Converts object to number */
        number(value) {
            throw new Error('Unable to cast from object to number');
        },
        /** Converts object to boolean */
        boolean(value) {
            throw new Error('Unable to cast from object to boolean');
        },
        /** Converts object to string */
        string(value) {
            return JSON.stringify(value);
        },
        /** Converts object to function */
        function(value) {
            throw new Error('Unable to cast from object to function');
        },
        /** Converts object to object */
        object(value) {
            return value;
        },
    },
};

/**
 * Converts a value to its specified equivalent type.
 * @param {Boolean|Function|Number|Object|String} value - Value to convert.
 * @param {String} toType - Values can be "boolean", "function", "object", "number", or "string".
 */
export const toPrimitive = function toPrimitive(value, toType) {
    if (value == null) return value;
    // TODO handle when value is an Object
    return _primitiveToPrimitive[typeof value][toType](value);
};

/**
 * Converts percent representation to the numerical factor.
 * @example percentToFactor("150%"); // returns 1.5
 * @param {String} percent - Value to convert.
 */
export const percentToFactor = function percentToFactor(percent) {
    const percentValue = percent.toString();
    const isPercent = percentValue.indexOf('%') > -1;
    let factor = parseInt(percentValue, 10);
    if (!isNaN(factor)) {
        if (isPercent) factor /= 100;
    } else factor = 1.0;

    return factor;
};

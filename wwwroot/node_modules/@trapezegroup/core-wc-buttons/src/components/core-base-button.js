/**  import litElement base class and html helper function */
import { LitElement, html, css } from 'lit-element';
import { translate as t } from 'lit-i18n/src/lit-i18n.js';
import { isDisabled } from '@trapezegroup/core-js-extensions/src/lib/element.js';

/** @typedef {('positive' | 'negative' | 'critical')} ButtonType */
/** This is an example of a component which extends the litElement */
export class CoreBaseButton extends LitElement {
    /** @inheritdoc */
    static get styles() {
        return css`
            :host {
                display: inline-block;
                text-transform: uppercase;
                text-align: center;
                font-weight: bold;
                min-width: 10rem;
                font-size: 1.2rem;
                padding: 1.2rem;
                cursor: pointer;
                user-select: none;
                opacity: 1;
                box-sizing: border-box;
                outline: none;
            }

            :host(:focus) {
                /* Temporary focus highlight until we get HSLa colours and we can adjust the lightness */
                opacity: 0.9;
            }

            :host([button-type='positive']) {
                background-color: var(--prim-button-bg);
                color: var(--prim-button-txt);
                border: 1px solid var(--prim-button-bg);
            }

            :host([button-type='negative']) {
                color: var(--sec-button-txt);
                border: 1px solid var(--sec-button-border);
                background-color: var(--sec-button-bg);
            }

            :host([button-type='critical']) {
                color: var(--col-15);
                border: 1px solid var(--prim-txt-error);
                background-color: var(--prim-txt-error);
            }
        `;
    }

    /** @inheritdoc */
    static get properties() {
        return {
            buttonTitle: {
                type: String,
                attribute: 'button-title',
            },
            buttonType: {
                type: String,
                attribute: 'button-type',
                reflect: true,
            },
            tabIndex: {
                type: String,
                attribute: 'tabindex',
                reflect: true,
            },
        };
    }

    /** @inheritdoc */
    connectedCallback() {
        if (this.isConnected) {
            this.addEventListener('click', e => this.buttonAction(e), { capture: true });
            // Also invoke the button for space and return key presses
            this.addEventListener('keyup', e => (e.keyCode === 13 || e.keyCode === 32) && this.click());
        }

        super.connectedCallback();
    }

    /** We can initialize the properties here in the constructor */
    constructor() {
        // Must call superconstructor first.
        super();
        /** @type {string} */
        this.buttonTitle = '';
        /** @type {ButtonType} */
        this.buttonType = 'positive';
        this.tabIndex = 0;
    }

    /**
     * Handles the click event
     * @param {MouseEvent} e the original event
     * @returns {boolean} whether to proceed with the event
     */
    buttonAction(e) {
        if (isDisabled(this)) {
            e.preventDefault();
            e.stopImmediatePropagation();
            return false;
        }

        const event = new CustomEvent(this.buttonEventName, {
            bubbles: true,
            composed: true,
            detail: { message: 'Button was invoked' },
            cancelable: true,
        });
        this.dispatchEvent(event);
        return true;
    }

    /** @returns {string} the event name to use when the button is clicked */
    get buttonEventName() {
        return 'buttonAction';
    }

    /** @inheritdoc */
    render() {
        return html`
            <slot type=${this.buttonType}>${
            this.buttonTitle.indexOf('core-wc-buttons:') === 0 ? t(this.buttonTitle, {}) : this.buttonTitle
        }</slot>
        `;
    }
}

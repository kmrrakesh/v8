/* eslint-disable no-plusplus */
// @ts-check
/**
 * Converts an isoDate string to a Date object.
 * @param {string} isoDate - The isoDate string YYYYMMdd.
 * @returns {Date}
 */
export const isoDateToDate = function isoDateToDate(isoDate) {
    if (!isoDate || isoDate.length === 0) return null;

    try {
        return new Date(
            parseInt(getIsoYear(isoDate), 10),
            parseInt(getIsoMonth(isoDate), 10) - 1,
            parseInt(getIsoDay(isoDate), 10),
        );
    } catch (e) {
        // This block is intentionally left blank.
        // The failure to convert date string means a null value for the caller.
    }

    return null;
};

/**
 * Gets the day portion of an isoDate string.
 * @param {string|number} isoDate - The isoDate string YYYYMMdd
 * @returns {string} the day portion of the isoDate string.
 */
export const getIsoDay = function getIsoDay(isoDate) {
    return `${isoDate}`.substr(6, 2);
};

/**
 * Gets the month portion of an isoDate string.
 * @param {string|number} isoDate - The isoDate string YYYYMMdd
 * @returns {string} the month portion of the isoDate string.
 */
export const getIsoMonth = function getIsoMonth(isoDate) {
    return `${isoDate}`.substr(4, 2);
};

/**
 * Gets the year portion of an isoDate string.
 * @param {string|number} isoDate - The isoDate string YYYYMMdd.
 * @returns {string} - isoDates are encoded as YYYYMMdd
 */
export const getIsoYear = function getIsoYear(isoDate) {
    return `${isoDate}`.substr(0, 4);
};

/**
 * Converts the day portion of an isoDate string to a number suitable for creating a Date object (1-31).
 * @param {string} isoDay - The day portion of the isoDate string.
 * @returns {number} the day portion of the isoDate string.
 */
export function isoDayToDay(isoDay) {
    const day = Number(isoDay);
    return day.valueOf();
}

/**
 * Converts the month portion of an isoDate string("01"-"12") to a number suitable for creating a Date object (0-11).
 * @param {string} isoMonth - The month portion of the isoDate string.
 * @returns {number} the month portion of the isoDate string.
 */
export const isoMonthToMonth = function isoMonthToMonth(isoMonth) {
    const monthNumber = Number(isoMonth);
    let month = monthNumber.valueOf();
    month--;
    return month;
};

/**
 * Converts the year portion of an isoDate string to a number suitable for creating a Date object.
 * @param {string} isoYear - The year portion of the isoDate string.
 * @returns {number} the year portion of the isoDate string.
 */
export function isoYearToYear(isoYear) {
    const year = Number(isoYear);
    return year.valueOf();
}

/**
 * Converts an isoDatetime string to a Date object.
 * @param {String} isoDatetime - The isoDatetime string.
 * @returns {Date} the Date object represented by the isoDatetime string.
 */
export function isoDatetimeToDate(isoDatetime) {
    if (!isoDatetime || isoDatetime.length === 0) return null;

    const tokens = isoDatetime.split('T');

    const isoDate = tokens[0];
    const isoTime = tokens[1];

    const hours = isoTime == null ? isoTime : isoTime.substr(0, 2);
    const minutes = isoTime == null ? isoTime : isoTime.substr(2, 2);
    const seconds = isoTime == null ? isoTime : isoTime.substr(4, 2);
    const milliseconds = isoTime == null ? isoTime : isoTime.substr(6, 3);

    try {
        // todo: finish parsing hours/minutes/seconds
        return new Date(
            parseInt(getIsoYear(isoDate), 10),
            Number(getIsoMonth(isoDate)) - 1,
            parseInt(getIsoDay(isoDate), 10),
            parseInt(hours, 10),
            parseInt(minutes, 10),
            parseInt(seconds, 10),
            parseInt(milliseconds, 10),
        );
        // eslint-disable-next-line no-empty
    } catch (e) {}

    return null;
}

/**
 * Gets the year portion of an isoDate string as a number suitable for creating a Date object.
 * @param {string} isoDate - The isoDate string.
 * @returns {number} the year  portion of the isoDate string.
 */
export function getYear(isoDate) {
    const isoYear = getIsoYear(isoDate);
    return isoYearToYear(isoYear);
}

/**
 * Determines the day of the week (0-6) of an isoDate string.
 * @param {string} isoDate - The isoDate string.
 * @returns {number} the day of the week for the Date represented by the isoDate string.
 */
export function getDayOfWeek(isoDate) {
    return isoDateToDate(isoDate).getDay();
}

/**
 * Checks whether the argument year is a leap year.Element
 * @param {number} isoYear - The integer representation of a particular year.
 * @returns {boolean} Returns TRUE when the argument year is a leap year, otherwise FALSE is returned.
 * @instance
 * @memberof Date
 */
export function isLeapYear(isoYear) {
    const year = Number(isoYear);
    // eslint-disable-next-line no-nested-ternary
    return year % 400 ? (year % 100 ? !(year % 4) : false) : true;
}

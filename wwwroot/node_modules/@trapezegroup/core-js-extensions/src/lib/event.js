// @ts-check
export const EventKeys = {
    KEY_BACKSPACE: 8,
    KEY_TAB: 9,
    KEY_RETURN: 13,
    KEY_ESC: 27,
    KEY_LEFT: 37,
    KEY_UP: 38,
    KEY_RIGHT: 39,
    KEY_DOWN: 40,
    KEY_DELETE: 46,
    KEY_HOME: 36,
    KEY_END: 35,
    KEY_PAGEUP: 33,
    KEY_PAGEDOWN: 34,
    KEY_INSERT: 45,
};

/** @param {Event} event */
export function eventStop(event) {
    event.preventDefault();
    event.stopPropagation();
}

/**
 * Create, dispatches and returns a CustomEvent.
 * @param {HTMLElement} target
 * @param {string} eventName - Custom event name
 * @param {*} eventContext - Custom Event Context
 * @returns {CustomEvent}
 */
export function dispatchCustomEvent(target, eventName, eventContext) {
    const event = new CustomEvent(eventName, {
        bubbles: true,
        composed: true,
        detail: eventContext,
    });
    const onEventName = `on${eventName.charAt(0).toUpperCase()}${eventName.substr(1)}`;
    target[onEventName] ? target[onEventName](event) : _evalEventHandler(target.getAttribute(onEventName), event);
    target.dispatchEvent(event);
    return event;
}

/**
 * Heper to minize closure noise when evaling script.
 * @param {string} __code JavaScript to evaluate
 * @param {CustomEvent} event The event to fire
 */
function _evalEventHandler(__code, event) {
    // eslint-disable-next-line no-eval
    eval(__code);
}

/**
 * Abstracts the observing and capturing of events for drag and drop functionality. Use when drag and drop functionality is initiated.
 * @param {HTMLElement} element
 * @param {EventListenerOrEventListenerObject} dragHandler - The handler that will be called when the drag is fired. This function should be chached somewhere so that the EXACT same function instance can be used the call #stopObservingDragAndDrop.
 * @param {EventListenerOrEventListenerObject} dropHandler - The handler that will be called when the drop is fired. This function should be chached somewhere so that the EXACT same function instance can be used the call #stopObservingDragAndDrop.
 */
export function observeDragAndDrop(element, dragHandler, dropHandler) {
    element.addEventListener('mousemove', dragHandler, true);
    element.addEventListener('mouseup', dropHandler, true);
    return element;
}

/**
 * Removes a observeDragAndDrop. See #observeDragAndDrop.
 * @param {HTMLElement} element
 * @param {EventListenerOrEventListenerObject} dragHandler - The handler that will be called when the drag is fired. Must be the EXACT instance of the function that was used in the #observeDragAndDrop.
 * @param {EventListenerOrEventListenerObject} dropHandler - The handler that will be called when the drop is fired. Must be the EXACT instance of the function that was used in the #observeDragAndDrop.
 */
export function stopObservingDragAndDrop(element, dragHandler, dropHandler) {
    element.removeEventListener('mousemove', dragHandler);
    element.removeEventListener('mouseup', dropHandler);
    return element;
}

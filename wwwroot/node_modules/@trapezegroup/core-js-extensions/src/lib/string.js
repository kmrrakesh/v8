// @ts-check

/**
 * 1,2,6-8,1 --> [1,2,6,7,8,11]
 * @param {string} csvString Format must be 1,2,6-8,11
 * @returns {Array} Array of indexes defined in the input. e.g. [1,2,6,7,8,11].
 */
export const fromCsvWithRanges = function fromCsvWithRanges(csvString) {
    // TODO make smarter. '-' should be a range, ',' or ';' should specify single cells NOT range.
    const map = [];
    const pattern = csvString;

    const csv = pattern.split(/[,|;]+/);
    const rangedPattern = /^(-?\d+)-(-?\d+)$/;
    for (let i = 0, size = csv.length; i < size; i++) {
        if (rangedPattern.test(csv[i])) {
            const ranges = csv[i].match(rangedPattern);
            const from = parseInt(ranges[1], 10);
            const to = parseInt(ranges[2], 10);
            if (from === to) map.push(to);
            else if (from < to) for (let j = from; j <= to; j++) map.push(j);
            else for (let j = from; j >= to; j--) map.push(j);
        } else {
            map.push(parseInt(csv[i], 10));
        }
    }
    return map;
};

/**
 * @param {string} string
 * @returns {string}
 */
export function underscore(string) {
    return string
        .replace(/::/g, '/')
        .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')
        .replace(/([a-z\d])([A-Z])/g, '$1_$2')
        .replace(/-/g, '_')
        .toLowerCase();
}

/**
 * @param {string} string
 * @returns {string}
 */
export function dasherize(string) {
    return string.replace(/_/g, '-');
}

/**
 * @param {string} string
 * @returns {string}
 */
export function camelize(string) {
    return string.replace(/-+(.)?/g, (match, chr) => (chr ? chr.toUpperCase() : ''));
}

/**
 * @param {string} string
 * @returns {string}
 */
export function capitalize(string) {
    return string.charAt(0).toUpperCase() + string.substring(1).toLowerCase();
}

/**
 * Returns TRUE when the specified value matches the end of the string.
 * @param {string} str - string to look in
 * @param {string} value - String to match against.
 * @param {boolean} caseInsensitive - Set to TRUE for case-insensitive.
 * @returns {boolean} TRUE when the string matches the specified value.
 */
export function compareRight(str, value, caseInsensitive) {
    const regexEscapedValue = value.replace(/[\.\^\$\*\+\-\?\(\)\[\]\{\}\\\|]/g, g1 => `\\${g1}`);
    return new RegExp(`${regexEscapedValue}$`, caseInsensitive ? 'i' : undefined).test(str);
}

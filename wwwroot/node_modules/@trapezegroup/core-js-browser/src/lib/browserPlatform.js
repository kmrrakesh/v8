// @ts-check
export const BrowserPlatform = {
    Mac: null,
    Windows: null,
    Linux: null,
    Android: null,
    iPad: null,
    iPod: null,
    iPhone: null,
    Blackberry: null,
    Desktop: null,
    Tablet: null,
    Phone: null,
    iOS: null,
    Standalone: null,
    Touch: null,
    PointerType: null,
};

const mediaQueryElem = document.createElement('div');
mediaQueryElem.id = 'mediaQuery';
document.documentElement.insertBefore(mediaQueryElem, document.documentElement.firstChild);

// TODO We need to move away from this browser sniffing and instead move to feature detection.
const platforms = [
    { property: 'platform', regex: /iPhone/i, identity: 'iPhone' },
    { property: 'platform', regex: /iPod/i, identity: 'iPod' },
    { property: 'userAgent', regex: /iPad/i, identity: 'iPad' },
    { property: 'userAgent', regex: /Blackberry/i, identity: 'Blackberry' },
    { property: 'userAgent', regex: /Android/i, identity: 'Android' },
    { property: 'platform', regex: /Mac/i, identity: 'Mac' },
    { property: 'platform', regex: /Win/i, identity: 'Windows' },
    { property: 'platform', regex: /Linux/i, identity: 'Linux' },
];

const { navigator } = window;
const BP = BrowserPlatform;

for (let i = 0, iLen = platforms.length; i < iLen; i++) {
    const platform = platforms[i];
    BP[platform.identity] = platform.regex.test(navigator[platform.property]);
}

BP.Desktop = BP.Mac || BP.Windows || (BP.Linux && !BP.Android);
BP.Tablet = BP.iPad;
BP.Phone = !BP.Desktop && !BP.Tablet;
BP.iOS = BP.iPhone || BP.iPad || BP.iPod;
BP.Standalone = !!window.matchMedia('(display-mode: standalone)').matches;

let touchSupported = false;

if ('ontouchstart' in window) touchSupported = true;
else touchSupported = mediaQueryElem.offsetTop === -9;
BP.Touch = touchSupported;

// eslint-disable-next-line no-nested-ternary
BP.PointerType = mediaQueryElem.offsetLeft === -9 ? 'coarse' : mediaQueryElem.offsetLeft === -19 ? 'fine' : null;

document.documentElement.removeChild(mediaQueryElem);

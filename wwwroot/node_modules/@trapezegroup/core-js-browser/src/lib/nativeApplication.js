// @ts-check

/**
 * Outputs data to a new browser window URL bar. Can be used to open up CSV or Excel data generated on the client.
 * @param {object} options
 * @param {object} options.data - The raw data for the download
 * @param {string} options.fileName - The file name tat the data will be downloaded as
 * @param {string} options.mediaType - The Mime type to open the data as. This will dictate which applicaiotn the data is opened with
 * @param {boolean} [options.base64] - Whether to perform base 64 encoding to the data. Default is false.
 */
export const openDataInBrowser = function pushData(options) {
    const optionsWithDefault = Object.assign({ base64: false, data: '', fileName: '', mediaType: '' }, options || {});

    if (window.navigator.msSaveBlob) {
        const blobObject = new Blob([optionsWithDefault.data]);
        window.navigator.msSaveOrOpenBlob(blobObject, optionsWithDefault.fileName);
    } else {
        const uri = `data:${optionsWithDefault.mediaType || ''}${optionsWithDefault.base64 ? ';base64' : ''},${
            optionsWithDefault.data
                ? encodeURIComponent(
                      optionsWithDefault.base64 ? btoa(optionsWithDefault.data) : optionsWithDefault.data,
                  )
                : ''
        }`;
        const a = document.createElement('a');
        a.setAttribute('download', optionsWithDefault.fileName);
        a.setAttribute('href', uri);

        if ('download' in a) {
            document.body.appendChild(a); // Firefox
            a.click();
            document.body.removeChild(a); // Firefox
        } else window.open(uri);
    }
};
